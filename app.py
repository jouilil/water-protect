import pandas as pd
import plotly.express as px
import numpy as np
import streamlit as st
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from datetime import datetime

# ‚úÖ Configuration de la page Streamlit
st.set_page_config(layout="wide", page_title="Global Water Sales Dashboard")

# Date actuelle
current_date = datetime.now().strftime("%d %B %Y")


# Affichage dans Streamlit
st.markdown(f"<p><strong>Date actuelle :</strong> {current_date}</p>", unsafe_allow_html=True)
st.markdown(f"<p><strong>Derni√®re mise √† jour :</strong> {last_update_date}</p>", unsafe_allow_html=True)

# ‚úÖ Style personnalis√©
st.markdown("""
    <style>
        body {
            background-color: white;
            color: black;
        }
        .stTitle, .stHeader, .stMarkdown h3, h3, h1 {
            color: black !important;
            font-weight: bold !important;
        }
        .block-container {
            background-color: white;
        }
        .stSelectbox, .stMultiSelect {
            background-color: #f0f0f0;
            color: black;
            border: 1px solid #ccc;
        }
        .stButton {
            background-color: #1976d2;
            color: white;
        }
        .stTextInput, .stTextArea {
            background-color: #f0f0f0;
            color: black;
            border: 1px solid #ccc;
        }
        .stSlider, .stRadio {
            background-color: #f0f0f0;
            color: black;
            border: 1px solid #ccc;
        }
        .css-1y5i3j3 {
            background-color: white;
        }
    </style>
""", unsafe_allow_html=True)

# ‚úÖ Charger les donn√©es
@st.cache_data
def load_data():
    df = pd.read_csv("data/cc1.csv")
    df['year'] = df['year'].astype(str).str.extract(r'(\d{4})')
    df = df.dropna(subset=['year'])
    df['year'] = df['year'].astype(int)
    df['Consumption'] = df['Consumption'].astype(str).str.replace(' ', '').astype(float)
    return df

df = load_data()

# ‚úÖ Fonction de pr√©vision
@st.cache_data
def forecast_sales(df, operator):
    operator_data = df[df['OPERATEUR'] == operator].copy()
    operator_data = operator_data.sort_values('year')

    X = operator_data[['year']]
    y = operator_data['Consumption']

    models = {
        "R√©gression Lin√©aire": LinearRegression(),
        "For√™t Al√©atoire": RandomForestRegressor(n_estimators=100, random_state=42),
        "Arbre de D√©cision": DecisionTreeRegressor(random_state=42),
        "R√©gression √† Vecteurs de Support": SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)
    }

    future_years = np.arange(2020, 2027)
    forecast_data = {}

    for model_name, model in models.items():
        model.fit(X, y)
        y_pred = model.predict(future_years.reshape(-1, 1))
        residuals = y - model.predict(X)
        std_dev = np.std(residuals)
        ci = 1.96 * std_dev

        forecast_data[model_name] = pd.DataFrame({
            "year": future_years,
            "prediction": y_pred,
            "lower": y_pred - ci,
            "upper": y_pred + ci
        })

    return operator_data, forecast_data

# ‚úÖ En-t√™te
col1, col2 = st.columns([1, 3])
with col1:
    st.image("logo.JPG", width=130)
with col2:
    st.markdown("<h1 style='color:blue; font-weight:bold;'>üíß Global Water Sales Dashboard</h1>", unsafe_allow_html=True)

st.markdown("""

<h3>üîõ <strong> Introduction </strong></h3>

<p> Ce Dashboard üíß interactif offre une vue analytique compl√®te des ventes d‚Äôeau par op√©rateur au sein des ports marocains, couvrant la p√©riode allant de 2020 √† 2024 (janvier √† ao√ªt). D√©velopp√© pour faciliter la compr√©hension des dynamiques de consommation et appuyer la prise de d√©cision strat√©gique, il int√®gre plusieurs modules de visualisation et d‚Äôanalyse pr√©dictive.</p>

<p>Le Dashboard se structure en quatre volets principaux :</p>

<ol>
  <li><strong>Analyse historique des ventes par op√©rateur</strong> : un graphique lin√©aire interactif permet de visualiser l‚Äô√©volution annuelle des volumes d‚Äôeau vendus par chaque op√©rateur, mettant en √©vidence les tendances, pics et √©ventuelles ruptures.</li>
  <li><strong>R√©partition annuelle sous forme de graphique circulaire</strong> : cette visualisation met en relief la part relative de chaque ann√©e dans la consommation globale d‚Äôun op√©rateur donn√©, facilitant la comparaison entre exercices.</li>
  <li><strong>Comparaison inter-op√©rateurs par radar</strong> : une repr√©sentation radiale permet de comparer visuellement les volumes annuels de ventes entre op√©rateurs, avec la possibilit√© de s√©lectionner dynamiquement les ann√©es √† analyser.</li>
  <li><strong>Module de pr√©vision par Machine Learning</strong> : bas√© sur plusieurs algorithmes (r√©gression lin√©aire, for√™t al√©atoire, arbre de d√©cision et SVM), ce module propose des projections de la demande future, assorties d‚Äôintervalles de confiance pour mieux anticiper les √©volutions.</li>
</ol>

<p>Gr√¢ce √† une interface √©pur√©e, des filtres dynamiques et des repr√©sentations graphiques adapt√©es, ce tableau de bord constitue un outil d√©cisionnel robuste pour les gestionnaires, les analystes et les acteurs institutionnels impliqu√©s dans la gestion durable des ressources hydriques.</p>
""", unsafe_allow_html=True)

st.markdown("""
<hr>
<h3>‚öôÔ∏è <strong>Technologies et outils utilis√©s</strong></h3>

<p>Le d√©veloppement de ce Dashboard interactif repose sur une combinaison d'outils et de technologies permettant de garantir √† la fois flexibilit√©, performance et interactivit√©.</p>

<ul>
    <li><strong>Python</strong> : Le langage de programmation principal utilis√© pour la manipulation des donn√©es, le calcul des pr√©visions, et l'int√©gration des mod√®les de Machine Learning.</li>
    <li><strong>Streamlit</strong> : Un framework Python permettant de d√©velopper des applications web interactives. Il a √©t√© choisi pour sa simplicit√© d‚Äôutilisation et sa capacit√© √† g√©n√©rer rapidement des interfaces utilisateur performantes et esth√©tiques.</li>
    <li><strong>Pandas</strong> : Une biblioth√®que Python pour la gestion et la manipulation de donn√©es structur√©es. Elle est utilis√©e pour le pr√©traitement et l'agr√©gation des donn√©es historiques sur les ventes d‚Äôeau.</li>
    <li><strong>Plotly</strong> : Utilis√©e pour cr√©er des visualisations interactives. Plotly permet de g√©n√©rer des graphiques dynamiques et des cartes, adapt√©s aux besoins de visualisation des tendances de ventes et des pr√©visions.</li>
    <li><strong>Scikit-learn</strong> : Biblioth√®que sp√©cialis√©e dans le Machine Learning, utilis√©e pour les mod√®les de r√©gression et de pr√©vision, notamment la r√©gression lin√©aire, l'arbre de d√©cision et la for√™t al√©atoire.</li>
    <li><strong>Visual Studio Code (VS Code)</strong> : L'environnement de d√©veloppement int√©gr√© (IDE) choisi pour la r√©daction du code, permettant une gestion claire du projet gr√¢ce √† ses fonctionnalit√©s de d√©bogage, de gestion de versions et d'int√©gration d'extensions Python.</li>
</ul>

<p>En combinant ces outils, le tableau de bord offre une solution robuste et √©volutive pour l'analyse des ventes d'eau, capable de r√©pondre √† diff√©rents besoins d'analyse et de d√©cision, tout en restant facile √† utiliser pour les utilisateurs finaux.</p>
""", unsafe_allow_html=True)

# ‚úÖ Barre lat√©rale
with st.sidebar:
    st.header("‚öôÔ∏è Contr√¥les")
    selected_operator = st.selectbox("S√©lectionnez un op√©rateur :", sorted(df["OPERATEUR"].unique()))
    selected_models = st.multiselect(
        "S√©lectionnez les mod√®les de pr√©vision :",
        ["R√©gression Lin√©aire", "For√™t Al√©atoire", "Arbre de D√©cision", "R√©gression √† Vecteurs de Support"],
        default=["R√©gression Lin√©aire", "For√™t Al√©atoire"]
    )

# ‚úÖ Titre section visualisation
st.markdown("<h2>üìä Description et Visualisations des Donn√©es</h2>", unsafe_allow_html=True)

# ‚úÖ Ligne
# ‚úÖ Graphique des ventes annuelles de tous les op√©rateurs
st.markdown("<h3>üìà Ventes Annuelles d'Eau - Tous les Op√©rateurs</h3>", unsafe_allow_html=True)

# Regrouper les donn√©es par op√©rateur et ann√©e
grouped_all = df.groupby(['year', 'OPERATEUR'])['Consumption'].sum().reset_index()

# Cr√©er la figure
fig_all_operators = go.Figure()

# Tracer une ligne par op√©rateur
for operator in grouped_all['OPERATEUR'].unique():
    operator_data = grouped_all[grouped_all['OPERATEUR'] == operator]
    fig_all_operators.add_trace(go.Scatter(
        x=operator_data['year'],
        y=operator_data['Consumption'],
        mode='lines+markers',
        name=operator
    ))

# Mise en forme
fig_all_operators.update_layout(
    xaxis_title="Ann√©e",
    yaxis_title="Consommation ",
    title="",
    paper_bgcolor="white",
    plot_bgcolor="white",
    font_color="black",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.4,
        xanchor="center",
        x=0.5,
        font=dict(size=12)
    )
)

st.plotly_chart(fig_all_operators, use_container_width=True)
# ‚úÖ Radar
# ‚úÖ Radar avec les op√©rateurs comme angles et les ann√©es s√©lectionnables
# ‚úÖ Radar avec couleurs diff√©rentes pour chaque ann√©e s√©lectionn√©e
st.markdown("<h3>üîç Comparaison Annuelle par Op√©rateur</h3>", unsafe_allow_html=True)

# Liste des ann√©es disponibles
available_years = sorted(df["year"].unique())

# Checkboxes pour s√©lectionner les ann√©es √† comparer
st.markdown("**S√©lectionnez les ann√©es √† comparer :**")
selected_years = []
cols = st.columns(len(available_years))
for i, year in enumerate(available_years):
    if cols[i].checkbox(str(year), value=(year == max(available_years))):  # coche la plus r√©cente par d√©faut
        selected_years.append(year)

# Si aucune ann√©e s√©lectionn√©e, afficher un avertissement
if not selected_years:
    st.warning("Veuillez s√©lectionner au moins une ann√©e pour afficher le radar.")
else:
    # Palette de couleurs pour distinguer les ann√©es
    color_palette = px.colors.qualitative.Set2 + px.colors.qualitative.Plotly

    # Cr√©er le radar chart
    fig_radar = go.Figure()

    for i, year in enumerate(selected_years):
        yearly_data = df[df["year"] == year]
        radar_summary = yearly_data.groupby("OPERATEUR")["Consumption"].sum().reset_index()

        fig_radar.add_trace(go.Scatterpolar(
            r=radar_summary["Consumption"],
            theta=radar_summary["OPERATEUR"],
            fill='toself',
            name=str(year),
            line=dict(color=color_palette[i % len(color_palette)])
        ))

    fig_radar.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[0, df[df['year'].isin(selected_years)]['Consumption'].max() * 1.1])
        ),
        showlegend=True,
        title=f"Radar des Ventes par Op√©rateur ({', '.join(map(str, selected_years))})",
        paper_bgcolor="white",
        font_color="black",
        legend=dict(orientation="h", yanchor="bottom", y=-0.4, xanchor="center", x=0.5)
    )

    st.plotly_chart(fig_radar, use_container_width=True)



# ‚úÖ Camembert
st.markdown(f"<h3>‚≠ï Part Annuelle de la Consommation - {selected_operator}</h3>", unsafe_allow_html=True)
filtered_pie = df[df["OPERATEUR"] == selected_operator]
pie_fig = px.pie(
    filtered_pie,
    names="year",
    values="Consumption",
    title=f"R√©partition Annuelle de la Consommation - {selected_operator}",
    hole=0.3,
    labels={"year": "Ann√©e", "Consumption": "Ventes (m¬≥)"}
).update_layout(
    paper_bgcolor="white",
    plot_bgcolor="white",
    font_color="black",
    legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5,
                font=dict(size=12, color='black'),
                bgcolor='rgba(0, 0, 0, 0.05)', borderwidth=0)
)
st.plotly_chart(pie_fig, use_container_width=True)

# ‚úÖ Pr√©vision
st.markdown(f"<h3>üîÆ Pr√©vision des Ventes d'Eau pour {selected_operator} (2020‚Äì2026)</h3>", unsafe_allow_html=True)
st.markdown("""

    <p> Cette section  se concentre sur l'estimation des ventes futures d'eau √† travers diff√©rents mod√®les de Machine Learning. En exploitant des m√©thodes statistiques avanc√©es et des algorithmes d'apprentissage automatique, nous fournissons des pr√©visions bas√©es sur les donn√©es historiques des op√©rateurs.</p>

    <p>Les mod√®les de pr√©vision utilis√©s sont :</p>
    <ul>
        <li><strong>R√©gression Lin√©aire</strong> : Ce mod√®le simple mais puissant est utilis√© pour √©tablir une relation lin√©aire entre l'ann√©e et la consommation d'eau, permettant ainsi de pr√©voir les tendances futures.</li>
        <li><strong>For√™t Al√©atoire</strong> : Un mod√®le d'ensemble qui construit plusieurs arbres de d√©cision pour am√©liorer la pr√©cision des pr√©visions, tout en r√©duisant le risque de surajustement (overfitting).</li>
        <li><strong>Arbre de D√©cision</strong> : Un mod√®le non lin√©aire qui divise les donn√©es en sous-groupes homog√®nes, permettant de capturer des relations complexes dans les donn√©es de consommation.</li>
        <li><strong>R√©gression √† Vecteurs de Support (SVR)</strong> : Un mod√®le de r√©gression robuste qui transforme les donn√©es d'entr√©e dans un espace de plus grande dimension afin de trouver une meilleure approximation des donn√©es non lin√©aires.</li>
    </ul>

    <p>Les pr√©visions g√©n√©r√©es par ces mod√®les sont accompagn√©es d'intervalles de confiance √† 95 %, offrant ainsi une √©valuation de l'incertitude associ√©e √† chaque estimation. Ces informations sont cruciales pour une prise de d√©cision √©clair√©e, notamment en mati√®re de planification des ressources et de strat√©gie de gestion de l'eau.</p>

    <p>Gr√¢ce √† cette approche, les utilisateurs peuvent visualiser les tendances √† court et moyen terme des ventes d'eau pour chaque op√©rateur, facilitant ainsi la gestion et l'optimisation des ressources.</p>
""", unsafe_allow_html=True)

actual_data, forecast_data = forecast_sales(df, selected_operator)
forecast_fig = go.Figure()

forecast_fig.add_trace(go.Scatter(
    x=actual_data['year'],
    y=actual_data['Consumption'],
    mode='lines+markers',
    name='R√©el',
    line=dict(color='cyan')
))

model_colors = {
    "R√©gression Lin√©aire": '#FFA500',
    "For√™t Al√©atoire": '#228B22',
    "Arbre de D√©cision": '#1E90FF',
    "R√©gression √† Vecteurs de Support": '#800080'
}

for model_name in selected_models:
    if model_name in forecast_data:
        forecast = forecast_data[model_name]
        color = model_colors[model_name]
        rgb = tuple(int(color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))

        forecast_fig.add_trace(go.Scatter(
            x=forecast['year'],
            y=forecast['prediction'],
            mode='lines+markers',
            name=f'Pr√©vision {model_name}',
            line=dict(color=color, dash='dash')
        ))
        forecast_fig.add_trace(go.Scatter(
            x=list(forecast['year']) + list(forecast['year'][::-1]),
            y=list(forecast['upper']) + list(forecast['lower'][::-1]),
            fill='toself',
            fillcolor=f'rgba{rgb + (0.2,)}',
            line=dict(color='rgba(255,255,255,0)'),
            hoverinfo="skip",
            name=f'{model_name} IC √† 95%'
        ))

forecast_fig.update_layout(
    xaxis_title="Ann√©e",
    yaxis_title="Ventes",
    paper_bgcolor="white",
    plot_bgcolor="white",
    font_color="black",
    legend=dict(orientation="h", yanchor="bottom", y=-0.4, xanchor="center", x=0.5,
                font=dict(size=12, color='black'),
                bgcolor='rgba(0, 0, 0, 0.05)', borderwidth=0)
)
st.plotly_chart(forecast_fig, use_container_width=True)

st.markdown("""
<hr>
<h3>üîö <strong>Conclusion</strong></h3>

<p>Ce tableau de bord üíß constitue un outil strat√©gique essentiel pour le suivi, l‚Äôanalyse et l‚Äôanticipation des ventes d‚Äôeau dans les ports marocains. En combinant des visualisations dynamiques avec des mod√®les de pr√©vision performants, il permet non seulement d‚Äôobserver les tendances pass√©es, mais aussi d‚Äôappuyer les d√©cisions futures en mati√®re de gestion des ressources hydriques.</p>

<p>Sa structure modulaire, sa capacit√© √† comparer les op√©rateurs et √† int√©grer des sc√©narios prospectifs en font une solution compl√®te, √©volutive et adapt√©e aux besoins des gestionnaires publics, des op√©rateurs priv√©s et des institutions de r√©gulation. Il contribue ainsi √† renforcer la transparence, l'efficacit√© op√©rationnelle et la planification durable dans le secteur de l'eau portuaire.</p>
""", unsafe_allow_html=True)

# ‚úÖ Footer
st.markdown("<br><br>", unsafe_allow_html=True)
st.markdown(
    "<p style='text-align: center; color: gray; font-style: italic; font-size: 14px;'>¬© Mai 2025 | Tableau de bord d√©velopp√© par M. Bougantouche & M. Bouceta</p>",
    unsafe_allow_html=True
)


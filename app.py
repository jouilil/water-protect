import pandas as pd
import plotly.express as px
import numpy as np
import streamlit as st
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from datetime import datetime

# ‚úÖ Configuration de la page Streamlit
st.set_page_config(layout="wide", page_title= "Evaluation globale de la consommation d'eau potable domestique par les diff√©rents usages")

# ‚úÖ Barre lat√©rale de navigation
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Choisir une interface :", ["Donn√©es officielles", "Enqu√™te Terrain"])

if page == "Donn√©es officielles":
    # üîΩ VOTRE CODE ACTUEL ICI üîΩ
    # load_data, forecast_sales, st.image, st.markdown, st.plotly_chart, etc.
    # ... (tout ce que vous avez d√©j√† fourni)

    # ‚úÖ Style personnalis√©
    st.markdown("""
        <style>
            body {
                background-color: white;
                color: black;
            }
            .stTitle, .stHeader, .stMarkdown h3, h3, h1 {
                color: black !important;
                font-weight: bold !important;
            }
            .block-container {
                background-color: white;
            }
            .stSelectbox, .stMultiSelect {
                background-color: #f0f0f0;
                color: black;
                border: 1px solid #ccc;
            }
            .stButton {
                background-color: #1976d2;
                color: white;
            }
            .stTextInput, .stTextArea {
                background-color: #f0f0f0;
                color: black;
                border: 1px solid #ccc;
            }
            .stSlider, .stRadio {
                background-color: #f0f0f0;
                color: black;
                border: 1px solid #ccc;
            }
            .css-1y5i3j3 {
                background-color: white;
            }
        </style>
    """, unsafe_allow_html=True)

    # ‚úÖ Charger les donn√©es
    @st.cache_data
    def load_data():
        df = pd.read_csv("data/cc1.csv")
        df['year'] = df['year'].astype(str).str.extract(r'(\d{4})')
        df = df.dropna(subset=['year'])
        df['year'] = df['year'].astype(int)
        df['Consumption'] = df['Consumption'].astype(str).str.replace(' ', '').astype(float)
        return df

    df = load_data()

    # ‚úÖ Fonction de pr√©vision
    @st.cache_data
    def forecast_sales(df, operator):
        operator_data = df[df['OPERATEUR'] == operator].copy()
        operator_data = operator_data.sort_values('year')

        X = operator_data[['year']]
        y = operator_data['Consumption']

        models = {
            "R√©gression Lin√©aire": LinearRegression(),
            "For√™t Al√©atoire": RandomForestRegressor(n_estimators=100, random_state=42),
            "Arbre de D√©cision": DecisionTreeRegressor(random_state=42),
            "R√©gression √† Vecteurs de Support": SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)
        }

        future_years = np.arange(2020, 2027)
        forecast_data = {}

        for model_name, model in models.items():
            model.fit(X, y)
            y_pred = model.predict(future_years.reshape(-1, 1))
            residuals = y - model.predict(X)
            std_dev = np.std(residuals)
            ci = 1.96 * std_dev

            forecast_data[model_name] = pd.DataFrame({
                "year": future_years,
                "prediction": y_pred,
                "lower": y_pred - ci,
                "upper": y_pred + ci
            })

        return operator_data, forecast_data

    # ‚úÖ En-t√™te
    col1, col2 = st.columns([1, 3])
    with col1:
        st.image("logo.JPG", width=130)
    with col2:
        st.markdown("<h1 style='color:blue; font-weight:bold;'>üíß Global Water Consumption Dashboard</h1>", unsafe_allow_html=True)

    # Date et heure actuelles en fran√ßais
    current_datetime = datetime.now().strftime("%d %B %Y %H:%M:%S")

    # Affichage dans Streamlit
    st.markdown(f"<p><strong>Derni√®re mise √† jour :</strong> {current_datetime}</p>", unsafe_allow_html=True)


    st.markdown("""

    <h2> <strong> 1. Introduction </strong></h2>

    <p> Ce Dashboard üíß interactif offre une vue analytique compl√®te de la consommation d‚Äôeau par op√©rateur au sein des ports marocains, couvrant la p√©riode allant de 2020 √† 2024 (janvier √† ao√ªt). D√©velopp√© pour faciliter la compr√©hension des dynamiques de consommation et appuyer la prise de d√©cision strat√©gique, il int√®gre plusieurs modules de visualisation et d‚Äôanalyse pr√©dictive.</p>

    <p>Ce Dashboard se structure en quatre volets principaux :</p>

    <ol>
    <li><strong>Analyse historique de la consommation par op√©rateur</strong> : un graphique lin√©aire interactif permet de visualiser l‚Äô√©volution annuelle des volumes d‚Äôeau vendus par chaque op√©rateur, mettant en √©vidence les tendances, pics et √©ventuelles ruptures.</li>
    <li><strong>R√©partition annuelle sous forme de graphique circulaire</strong> : cette visualisation met en relief la part relative de chaque ann√©e dans la consommation globale d‚Äôun op√©rateur donn√©, facilitant la comparaison entre exercices.</li>
    <li><strong>Comparaison inter-op√©rateurs par radar</strong> : une repr√©sentation radiale permet de comparer visuellement les volumes annuels de consommation entre op√©rateurs, avec la possibilit√© de s√©lectionner dynamiquement les ann√©es √† analyser.</li>
    <li><strong>Module de pr√©vision par Machine Learning</strong> : bas√© sur plusieurs algorithmes (r√©gression lin√©aire, for√™t al√©atoire, arbre de d√©cision et SVM), ce module propose des projections de la demande future, assorties d‚Äôintervalles de confiance pour mieux anticiper les √©volutions.</li>
    </ol>

    <p>Gr√¢ce √† une interface √©pur√©e, des filtres dynamiques et des repr√©sentations graphiques adapt√©es, ce tableau de bord constitue un outil d√©cisionnel robuste pour les gestionnaires, les analystes et les acteurs institutionnels impliqu√©s dans la gestion durable des ressources hydriques.</p>
    """, unsafe_allow_html=True)

    st.markdown("""
    <hr>
    <h3>‚öôÔ∏è <strong>Technologies et outils utilis√©s</strong></h3>

    <p>Le d√©veloppement de ce Dashboard interactif repose sur une combinaison d'outils et de technologies permettant de garantir √† la fois flexibilit√©, performance et interactivit√©.</p>

    <ul>
        <li><strong>Python</strong> : Le langage de programmation principal utilis√© pour la manipulation des donn√©es, le calcul des pr√©visions, et l'int√©gration des mod√®les de Machine Learning.</li>
        <li><strong>Streamlit</strong> : Un framework Python permettant de d√©velopper des applications web interactives. Il a √©t√© choisi pour sa simplicit√© d‚Äôutilisation et sa capacit√© √† g√©n√©rer rapidement des interfaces utilisateur performantes et esth√©tiques.</li>
        <li><strong>Pandas</strong> : Une biblioth√®que Python pour la gestion et la manipulation de donn√©es structur√©es. Elle est utilis√©e pour le pr√©traitement et l'agr√©gation des donn√©es historiques sur la consommation d‚Äôeau.</li>
        <li><strong>Plotly</strong> : Utilis√©e pour cr√©er des visualisations interactives. Plotly permet de g√©n√©rer des graphiques dynamiques et des cartes, adapt√©s aux besoins de visualisation des tendances de la consommation et des pr√©visions.</li>
        <li><strong>Scikit-learn</strong> : Biblioth√®que sp√©cialis√©e dans le Machine Learning, utilis√©e pour les mod√®les de r√©gression et de pr√©vision, notamment la r√©gression lin√©aire, l'arbre de d√©cision et la for√™t al√©atoire.</li>
        <li><strong>Visual Studio Code (VS Code)</strong> : L'environnement de d√©veloppement int√©gr√© (IDE) choisi pour la r√©daction du code, permettant une gestion claire du projet gr√¢ce √† ses fonctionnalit√©s de d√©bogage, de gestion de versions et d'int√©gration d'extensions Python.</li>
    </ul>

    <p>En combinant ces outils, le tableau de bord offre une solution robuste et √©volutive pour l'analyse de la consommation d'eau, capable de r√©pondre √† diff√©rents besoins d'analyse et de d√©cision, tout en restant facile √† utiliser pour les utilisateurs finaux.</p>
    """, unsafe_allow_html=True)

    # ‚úÖ Barre lat√©rale

    # ‚úÖ Titre section visualisation
    st.markdown("<h2>üìä 2. Description et Visualisations des Donn√©es</h2>", unsafe_allow_html=True)

    # ‚úÖ Ligne
    # ‚úÖ Graphique des ventes annuelles de tous les op√©rateurs
    st.markdown("<h3>üìà 2.1 Consommation d'Eau au fil du temps- Tous les Op√©rateurs</h3>", unsafe_allow_html=True)

    # Regrouper les donn√©es par op√©rateur et ann√©e
    grouped_all = df.groupby(['year', 'OPERATEUR'])['Consumption'].sum().reset_index()

    # Cr√©er la figure
    fig_all_operators = go.Figure()

    # Tracer une ligne par op√©rateur
    for operator in grouped_all['OPERATEUR'].unique():
        operator_data = grouped_all[grouped_all['OPERATEUR'] == operator]
        fig_all_operators.add_trace(go.Scatter(
            x=operator_data['year'],
            y=operator_data['Consumption'],
            mode='lines+markers',
            name=operator
        ))

    # Mise en forme
    fig_all_operators.update_layout(
        xaxis_title="Ann√©e",
        yaxis_title="Consommation ",
        title="",
        paper_bgcolor="white",
        plot_bgcolor="white",
        font_color="black",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.4,
            xanchor="center",
            x=0.5,
            font=dict(size=12)
        )
    )

    st.plotly_chart(fig_all_operators, use_container_width=True)
    # ‚úÖ Radar
    # ‚úÖ Radar avec les op√©rateurs comme angles et les ann√©es s√©lectionnables
    # ‚úÖ Radar avec couleurs diff√©rentes pour chaque ann√©e s√©lectionn√©e
    st.markdown("<h3>üîç 2.2 Comparaison Annuelle par Op√©rateur</h3>", unsafe_allow_html=True)

    # Liste des ann√©es disponibles
    available_years = sorted(df["year"].unique())

    # Checkboxes pour s√©lectionner les ann√©es √† comparer
    st.markdown("**S√©lectionnez les ann√©es √† comparer :**")
    selected_years = []
    cols = st.columns(len(available_years))
    for i, year in enumerate(available_years):
        if cols[i].checkbox(str(year), value=(year == max(available_years))):  # coche la plus r√©cente par d√©faut
            selected_years.append(year)

    # Si aucune ann√©e s√©lectionn√©e, afficher un avertissement
    if not selected_years:
        st.warning("Veuillez s√©lectionner au moins une ann√©e pour afficher le radar.")
    else:
        # Palette de couleurs pour distinguer les ann√©es
        color_palette = px.colors.qualitative.Set2 + px.colors.qualitative.Plotly

        # Cr√©er le radar chart
        fig_radar = go.Figure()

        for i, year in enumerate(selected_years):
            yearly_data = df[df["year"] == year]
            radar_summary = yearly_data.groupby("OPERATEUR")["Consumption"].sum().reset_index()

            fig_radar.add_trace(go.Scatterpolar(
                r=radar_summary["Consumption"],
                theta=radar_summary["OPERATEUR"],
                fill='toself',
                name=str(year),
                line=dict(color=color_palette[i % len(color_palette)])
            ))

        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(visible=True, range=[0, df[df['year'].isin(selected_years)]['Consumption'].max() * 1.1])
            ),
            showlegend=True,
            title=f"Radar de consommation par Op√©rateur ({', '.join(map(str, selected_years))})",
            paper_bgcolor="white",
            font_color="black",
            legend=dict(orientation="h", yanchor="bottom", y=-0.4, xanchor="center", x=0.5)
        )

        st.plotly_chart(fig_radar, use_container_width=True)



    # ‚úÖ Camembert

    # Contr√¥les de s√©lection dans la section 2.3
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("<h3>‚öôÔ∏è Analyse et Pr√©vision future </h3>", unsafe_allow_html=True)
    st.write("L‚Äôobjectif de cette section est de permettre √† l‚Äôutilisateur de s√©lectionner un op√©rateur afin d‚Äôacc√©der aux mod√®les de pr√©vision et aux statistiques annuelles, tout en organisant l‚Äôinterface de mani√®re claire et structur√©e gr√¢ce √† une disposition en colonnes. Merci de bien vouloir choisir un op√©rateur")
    st.write("Merci de s√©lectionner un op√©rateur")

    col1, col2 = st.columns([2, 3])
    with col1:
        selected_operator = st.selectbox("S√©lectionnez un op√©rateur :", sorted(df["OPERATEUR"].unique()), key="operator_select_2_3")
    with col2:
        selected_models = st.multiselect(
            "S√©lectionnez les mod√®les de pr√©vision :",
            ["R√©gression Lin√©aire", "For√™t Al√©atoire", "Arbre de D√©cision", "R√©gression √† Vecteurs de Support"],
            default=["R√©gression Lin√©aire", "For√™t Al√©atoire"],
            key="model_select_2_3"
        )

    st.markdown(f"<h3>‚≠ï 2.3  Part Annuelle de la Consommation - {selected_operator}</h3>", unsafe_allow_html=True)
    filtered_pie = df[df["OPERATEUR"] == selected_operator]
    pie_fig = px.pie(
        filtered_pie,
        names="year",
        values="Consumption",
        title=f"R√©partition Annuelle de la Consommation - {selected_operator}",
        hole=0.3,
        labels={"year": "Ann√©e", "Consumption": "Ventes (m¬≥)"}
    ).update_layout(
        paper_bgcolor="white",
        plot_bgcolor="white",
        font_color="black",
        legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5,
                    font=dict(size=12, color='black'),
                    bgcolor='rgba(0, 0, 0, 0.05)', borderwidth=0)
    )
    st.plotly_chart(pie_fig, use_container_width=True)

    # ‚úÖ Pr√©vision
    st.markdown(f"<h3>3. üîÆ Pr√©vision de la consommation d'Eau pour {selected_operator} (2020‚Äì2026)</h3>", unsafe_allow_html=True)
    st.markdown("""

        <p> Cette section  se concentre sur l'estimation de cla onsommation future d'eau √† travers diff√©rents mod√®les de Machine Learning. En exploitant des m√©thodes statistiques avanc√©es et des algorithmes d'apprentissage automatique, nous fournissons des pr√©visions bas√©es sur les donn√©es historiques des op√©rateurs.</p>

        <p>Les mod√®les de pr√©vision utilis√©s sont :</p>
        <ul>
            <li><strong>R√©gression Lin√©aire</strong> : Ce mod√®le simple mais puissant est utilis√© pour √©tablir une relation lin√©aire entre l'ann√©e et la consommation d'eau, permettant ainsi de pr√©voir les tendances futures.</li>
            <li><strong>For√™t Al√©atoire</strong> : Un mod√®le d'ensemble qui construit plusieurs arbres de d√©cision pour am√©liorer la pr√©cision des pr√©visions, tout en r√©duisant le risque de surajustement (overfitting).</li>
            <li><strong>Arbre de D√©cision</strong> : Un mod√®le non lin√©aire qui divise les donn√©es en sous-groupes homog√®nes, permettant de capturer des relations complexes dans les donn√©es de consommation.</li>
            <li><strong>R√©gression √† Vecteurs de Support (SVR)</strong> : Un mod√®le de r√©gression robuste qui transforme les donn√©es d'entr√©e dans un espace de plus grande dimension afin de trouver une meilleure approximation des donn√©es non lin√©aires.</li>
        </ul>

        <p>Les pr√©visions g√©n√©r√©es par ces mod√®les sont accompagn√©es d'intervalles de confiance √† 95 %, offrant ainsi une √©valuation de l'incertitude associ√©e √† chaque estimation. Ces informations sont cruciales pour une prise de d√©cision √©clair√©e, notamment en mati√®re de planification des ressources et de strat√©gie de gestion de l'eau.</p>

        <p>Gr√¢ce √† cette approche, les utilisateurs peuvent visualiser les tendances √† court et moyen terme de consommation d'eau pour chaque op√©rateur, facilitant ainsi la gestion et l'optimisation des ressources.</p>
    """, unsafe_allow_html=True)

    actual_data, forecast_data = forecast_sales(df, selected_operator)
    forecast_fig = go.Figure()

    forecast_fig.add_trace(go.Scatter(
        x=actual_data['year'],
        y=actual_data['Consumption'],
        mode='lines+markers',
        name='R√©el',
        line=dict(color='cyan')
    ))

    model_colors = {
        "R√©gression Lin√©aire": '#FFA500',
        "For√™t Al√©atoire": '#228B22',
        "Arbre de D√©cision": '#1E90FF',
        "R√©gression √† Vecteurs de Support": '#800080'
    }

    for model_name in selected_models:
        if model_name in forecast_data:
            forecast = forecast_data[model_name]
            color = model_colors[model_name]
            rgb = tuple(int(color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))

            forecast_fig.add_trace(go.Scatter(
                x=forecast['year'],
                y=forecast['prediction'],
                mode='lines+markers',
                name=f'Pr√©vision {model_name}',
                line=dict(color=color, dash='dash')
            ))
            forecast_fig.add_trace(go.Scatter(
                x=list(forecast['year']) + list(forecast['year'][::-1]),
                y=list(forecast['upper']) + list(forecast['lower'][::-1]),
                fill='toself',
                fillcolor=f'rgba{rgb + (0.2,)}',
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                name=f'{model_name} IC √† 95%'
            ))

    forecast_fig.update_layout(
        xaxis_title="Ann√©e",
        yaxis_title="Ventes",
        paper_bgcolor="white",
        plot_bgcolor="white",
        font_color="black",
        legend=dict(orientation="h", yanchor="bottom", y=-0.4, xanchor="center", x=0.5,
                    font=dict(size=12, color='black'),
                    bgcolor='rgba(0, 0, 0, 0.05)', borderwidth=0)
    )
    st.plotly_chart(forecast_fig, use_container_width=True)

    st.markdown("""
    <hr>
    <h3>üîö <strong>4. Conclusion</strong></h3>

    <p>Ce tableau de bord üíß constitue un outil strat√©gique essentiel pour le suivi, l‚Äôanalyse et l‚Äôanticipation de la consommation d‚Äôeau dans les ports marocains. En combinant des visualisations dynamiques avec des mod√®les de pr√©vision performants, il permet non seulement d‚Äôobserver les tendances pass√©es, mais aussi d‚Äôappuyer les d√©cisions futures en mati√®re de gestion des ressources hydriques.</p>

    <p>Sa structure modulaire, sa capacit√© √† comparer les op√©rateurs et √† int√©grer des sc√©narios prospectifs en font une solution compl√®te, √©volutive et adapt√©e aux besoins des gestionnaires publics, des op√©rateurs priv√©s et des institutions de r√©gulation. Il contribue ainsi √† renforcer la transparence, l'efficacit√© op√©rationnelle et la planification durable dans le secteur de l'eau portuaire.</p>
    """, unsafe_allow_html=True)

    # ‚úÖ Footer
    st.markdown("<br><br>", unsafe_allow_html=True)
    st.markdown(
        "<p style='text-align: center; color: gray; font-style: italic; font-size: 14px;'>¬© Mai 2025 | Tableau de bord d√©velopp√© par M. Bougantouche & M. Bouceta</p>",
        unsafe_allow_html=True
    )
elif page == "Enqu√™te Terrain":
    import streamlit as st
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    from io import StringIO
    from scipy.stats import pearsonr
    import plotly.figure_factory as ff

    # Donn√©es brutes d√©finies globalement
    data = """Operateur,1. Votre entreprise dispose-t-elle de douches pour le personnel ?,2. Votre entreprise dispose-t-elle d‚Äôun restaurant pour le personnel?,3. Votre entreprise dispose-t-elle d‚Äôun jardin/syst√®me d‚Äôarrosage de plantes ?,4. Votre entreprise dispose-t-elle d‚Äôune ou plusieurs lave-vaisselle?,5. Votre entreprise dispose-t-elle d‚Äôun ou de plusieurs lave linge ?,6. De combien de toilettes disposez-vous dans votre b√¢timents ?,7. Combien de personnes fr√©quentent approximativement vos locaux quotidiennement (personnel et visiteurs √©ventuels) ?
    ANP,oui,non,oui,0,0,15,200
    GLACIERES DU PORT,oui,non,non,0,0,2,10
    Marsa Maroc,oui,non,non,0,0,90,1800
    OCP,oui,non,non,0,0,64,550
    ONP,non,non,non,0,0,10,100
    somaport,oui,non,non,0,0,25,800
    Mana mesine,oui,non,non,0,0,2,10
    SOGAP,oui,non,non,0,0,2,30
    """

    # Titre principal
    st.markdown('<div class="main-title">üìä Analyse de la Consommation Domestique d\'Eau au Port de Casablanca : R√©sultats de l\'Enqu√™te Terrain</div>', unsafe_allow_html=True)
    # Date et heure actuelles en fran√ßais
    current_datetime = datetime.now().strftime("%d %B %Y %H:%M:%S")

    # Affichage dans Streamlit
    st.markdown(f"<p><strong>Derni√®re mise √† jour :</strong> {current_datetime}</p>", unsafe_allow_html=True)

    # Introduction
    st.markdown("""
    <div class="intro-box">
        <h4>Introduction</h4>
        <p>La gestion durable des ressources en eau est un enjeu majeur dans les zones portuaires, o√π les activit√©s √©conomiques
et humaines exercent une pression croissante sur cette ressource essentielle. Le Port de Casablanca, en tant que hub
√©conomique majeur du Maroc, concentre une diversit√© d‚Äôentreprises dont les activit√©s influencent directement la consommation
d‚Äôeau domestique. Afin de mieux comprendre ces dynamiques, une enqu√™te terrain a √©t√© men√©e pour collecter des donn√©es d√©taill√©es sur
les √©quipements li√©s √† la consommation d‚Äôeau domesstique dans ces entreprises. 

Objectifs de l'√©tude :
1. R√©v√©ler des tendances statistiques : identifier les patterns de consommation domestique d‚Äôeau par types d‚Äô√©quipements et op√©rateurs.
2. Proposer des visualisations interactives : offrir des outils graphiques intuitifs permettant aux utilisateurs d‚Äôexplorer
   les donn√©es de mani√®re dynamique.
3. Identifier des corr√©lations : d√©tecter des liens potentiels entre la fr√©quentation, les types d‚Äô√©quipements et les volumes
   d‚Äôeau consomm√©s, afin de mieux orienter les strat√©gies de gestion de l‚Äôeau.</p>
    </div>
    """, unsafe_allow_html=True)

    # Vue d'Ensemble des Donn√©es
    st.markdown('<div class="section-header">Vue d\'Ensemble des Donn√©es</div>', unsafe_allow_html=True)
    st.markdown('<div class="subheader">Donn√©es Brutes de l\'Enqu√™te</div>', unsafe_allow_html=True)
    st.dataframe(pd.read_csv(StringIO(data)), use_container_width=True)

    # CSS pour le style
    st.markdown("""
    <style>
    .main-title {
        font-size: 2.5em;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 0.5em;
    }
    .section-header {
        font-size: 1.8em;
        color: #1565C0;
        border-bottom: 2px solid #BBDEFB;
        padding-bottom: 0.2em;
    }
    .subheader {
        font-size: 1.4em;
        color: #1976D2;
        margin-top: 0.8em;
    }
    .info-box {
        background-color: #E3F2FD;
        padding: 1em;
        border-radius: 10px;
        margin-bottom: 1em;
    }
    .stButton>button {
        background-color: #1E88E5;
        color: white;
        border-radius: 5px;
        padding: 0.5em 1em;
    }
    .stButton>button:hover {
        background-color: #1565C0;
    }
    .graph-comment {
        background-color: #F8FAFD;
        padding: 1em;
        margin: 0.8em 0;
        border-radius: 8px;
        border-left: 4px solid #1E88E5;
    }
    .graph-comment h4 {
        color: #1565C0;
        font-size: 1.2em;
        margin-bottom: 0.4em;
    }
    .graph-comment ul {
        list-style-type: none;
        padding-left: 0;
    }
    .graph-comment li {
        margin-bottom: 0.5em;
        padding-left: 1.2em;
        position: relative;
    }
    .graph-comment li::before {
        content: '‚û§';
        color: #1E88E5;
        position: absolute;
        left: 0;
    }
    </style>
    """, unsafe_allow_html=True)

    # --- Chargement et Pr√©traitement des Donn√©es ---
    @st.cache_data
    def load_and_preprocess_data():
        df = pd.read_csv(StringIO(data))
        noms_colonnes = {
            '1. Votre entreprise dispose-t-elle de douches pour le personnel ?': 'Douches',
            '2. Votre entreprise dispose-t-elle d‚Äôun restaurant pour le personnel?': 'Restaurant',
            '3. Votre entreprise dispose-t-elle d‚Äôun jardin/syst√®me d‚Äôarrosage de plantes ?': 'Jardin_Arrosage',
            '4. Votre entreprise dispose-t-elle d‚Äôune ou plusieurs lave-vaisselle?': 'LaveVaisselle',
            '5. Votre entreprise dispose-t-elle d‚Äôun ou de plusieurs lave linge ?': 'LaveLinge',
            '6. De combien de toilettes disposez-vous dans votre b√¢timents ?': 'NbToilettes',
            '7. Combien de personnes fr√©quentent approximativement vos locaux quotidiennement (personnel et visiteurs √©ventuels) ?': 'NbPersonnesQuotidien'
        }
        df.rename(columns=noms_colonnes, inplace=True)
        df.set_index('Operateur', inplace=True)

        colonnes_oui_non = ['Douches', 'Restaurant', 'Jardin_Arrosage']
        for col in colonnes_oui_non:
            df[col] = df[col].str.strip().str.lower().map({'oui': 1, 'non': 0}).fillna(0)
        df['LaveVaisselle'] = pd.to_numeric(df['LaveVaisselle'], errors='coerce').fillna(0).astype(int)
        df['LaveLinge'] = pd.to_numeric(df['LaveLinge'], errors='coerce').fillna(0).astype(int)
        return df

    df = load_and_preprocess_data()

    # --- Exploration Visuelle des Donn√©es ---
    st.markdown('<div class="section-header">Exploration Visuelle des Donn√©es</div>', unsafe_allow_html=True)

    # 1. Analyse des √âquipements (Cat√©goriques)
    st.markdown('<div class="subheader">Analyse des √âquipements (Cat√©goriques)</div>', unsafe_allow_html=True)
    show_cat_bar = st.checkbox("Diagramme en barre", value=True, key='cat_bar')
    show_cat_pie = st.checkbox("Diagramme en cercle", value=True, key='cat_pie')

    # Analyse des √©quipements cat√©goriques
    variables_categorielles = ['Douches', 'Restaurant', 'Jardin_Arrosage', 'LaveVaisselle', 'LaveLinge']
    constantes = [col for col in variables_categorielles if df[col].nunique() == 1]

    # √âquipements non pr√©sents
    if constantes and show_cat_pie:
        st.markdown('<div class="subheader">√âquipements Non Pr√©sents</div>', unsafe_allow_html=True)
        for var in constantes:
            fig_donut = go.Figure(data=[
                go.Pie(labels=['Non (0)'], values=[len(df)], hole=0.5, textinfo='percent+label', marker=dict(colors=['#FF9999']))
            ])
            fig_donut.update_layout(title=f'R√©partition de {var}', height=300, annotations=[dict(text='100%', x=0.5, y=0.5, font_size=16, showarrow=False)])
            st.plotly_chart(fig_donut, use_container_width=True)
            st.markdown(f"""
            <div class="graph-comment">
                <h4>R√©partition de {var}</h4>
                <ul>
                    <li>100% (8/8 entreprises) sans {var.lower()}.</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

    # Distribution des √©quipements actifs
    st.markdown('<div class="subheader">Distribution des √âquipements Actifs</div>', unsafe_allow_html=True)
    cat_summary = pd.DataFrame({
        '√âquipement': variables_categorielles,
        'Pourcentage Oui (%)': [round(df[col].mean() * 100, 1) for col in variables_categorielles],
        'Nombre Oui': [df[col].sum() for col in variables_categorielles]
    })
    st.table(cat_summary)
    st.markdown("""
    <div class="graph-comment">
        <h4>Synth√®se Statistique</h4>
        <ul>
            <li>Douches : 75% (6/8 entreprises), √©quipement dominant.</li>
            <li>Jardin/Arrosage : 12.5% (1/8, ANP), usage marginal.</li>
            <li>Autres √©quipements : absents, non prioritaires.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    for var in ['Douches', 'Jardin_Arrosage']:
        value_counts_df = df[var].value_counts().reset_index()
        value_counts_df.columns = ['Valeur', 'Nombre']
        oui_count = value_counts_df[value_counts_df['Valeur'] == 1]['Nombre'].iloc[0] if 1 in value_counts_df['Valeur'].values else 0
        col1, col2 = st.columns(2)
        if show_cat_bar:
            with col1:
                fig_bar = px.bar(value_counts_df, x='Valeur', y='Nombre', title=f'Distribution de {var} (Barres)', color='Valeur', color_discrete_sequence=px.colors.qualitative.Pastel)
                fig_bar.update_layout(xaxis_title='Valeur (0 = Non, 1 = Oui)', yaxis_title='Nombre', showlegend=False)
                st.plotly_chart(fig_bar, use_container_width=True)
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Distribution de {var} (Barres)</h4>
                    <ul>
                        <li>{oui_count}/8 ({round(oui_count/8*100, 1)}%) ont {var.lower()}.</li>
                        <li>{'Priorit√© sanitaire.' if var == 'Douches' else 'Sp√©cifique √† ANP.'}</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
        if show_cat_pie:
            with col2:
                fig_pie = px.pie(value_counts_df, values='Nombre', names='Valeur', title=f'R√©partition de {var} (Cercle)', color_discrete_sequence=px.colors.qualitative.Pastel)
                fig_pie.update_traces(textinfo='percent+label')
                st.plotly_chart(fig_pie, use_container_width=True)
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>R√©partition de {var} (Cercle)</h4>
                    <ul>
                        <li>{round(oui_count/8*100, 1)}% avec, {100-round(oui_count/8*100, 1)}% sans.</li>
                        <li>{'Forte adoption.' if var == 'Douches' else 'Usage minoritaire.'}</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

    # 2. Statistiques des Variables Num√©riques
    st.markdown('<div class="subheader">Statistiques des Variables Num√©riques</div>', unsafe_allow_html=True)
    show_quant_hist = st.checkbox("Diagramme en barre (Histogramme)", value=True, key='quant_hist')
    show_quant_violin = st.checkbox("Diagramme en tuyaux", value=True, key='quant_violin')
    show_quant_box = st.checkbox("Boxplot", value=True, key='quant_box')

    # Analyse des variables quantitatives
    variables_quantitatives = ['NbToilettes', 'NbPersonnesQuotidien']
    stats_summary = pd.DataFrame({
        'Statistique': ['Moyenne', '√âcart-type', 'M√©diane', 'Min', 'Max', 'CV (%)'],
        'NbToilettes': [round(df['NbToilettes'].mean(), 2), round(df['NbToilettes'].std(), 2), df['NbToilettes'].median(), df['NbToilettes'].min(), df['NbToilettes'].max(), round(df['NbToilettes'].std() / df['NbToilettes'].mean() * 100, 1)],
        'NbPersonnesQuotidien': [round(df['NbPersonnesQuotidien'].mean(), 2), round(df['NbPersonnesQuotidien'].std(), 2), df['NbPersonnesQuotidien'].median(), df['NbPersonnesQuotidien'].min(), df['NbPersonnesQuotidien'].max(), round(df['NbPersonnesQuotidien'].std() / df['NbPersonnesQuotidien'].mean() * 100, 1)]
    })
    st.table(stats_summary)
    st.markdown("""
    <div class="graph-comment">
        <h4>Synth√®se Statistique</h4>
        <ul>
            <li>NbToilettes : Moyenne 26.25, m√©diane 12.5, CV 125.8%. Distribution asym√©trique (2 √† 90).</li>
            <li>NbPersonnesQuotidien : Moyenne 437.5, m√©diane 150, CV 144.6%. Valeur extr√™me √† 1800.</li>
            <li>Forte variabilit√©, influenc√©e par Marsa Maroc.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    for var in variables_quantitatives:
        with st.expander(f"üìà Analyse de {var}", expanded=True):
            stats = df[var].describe()
            cv = df[var].std() / df[var].mean() * 100
            stats_df = pd.DataFrame({
                'Statistique': ['Moyenne', '√âcart-type', 'M√©diane', 'Min', 'Max', 'CV (%)'],
                'Valeur': [round(stats['mean'], 2), round(stats['std'], 2), stats['50%'], stats['min'], stats['max'], round(cv, 2)]
            })
            st.markdown("**Statistiques Descriptives**")
            st.table(stats_df)
            st.markdown(f"""
            <div class="graph-comment">
                <h4>R√©sum√© de {var}</h4>
                <ul>
                    <li>Moyenne ({round(stats['mean'], 2)}) > m√©diane ({stats['50%']}), distribution asym√©trique.</li>
                    <li>CV {round(cv, 2)}% : forte dispersion.</li>
                    <li>√âtendue : {int(stats['min'])} √† {int(stats['max'])}.</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

            if show_quant_hist:
                fig_hist = px.histogram(df, x=var, nbins=10, title=f'Distribution de {var} (Histogramme)', color_discrete_sequence=['#1E88E5'])
                fig_hist.update_layout(xaxis_title=var, yaxis_title='Fr√©quence', showlegend=False)
                st.plotly_chart(fig_hist, use_container_width=True)
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Distribution de {var} (Histogramme)</h4>
                    <ul>
                        <li>Concentration autour de {stats['50%']}, queue vers {stats['max']}.</li>
                        <li>{'Marsa Maroc (90) extr√™me.' if var == 'NbToilettes' else 'Marsa Maroc (1800) extr√™me.'}</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

            if show_quant_violin:
                fig_violin = go.Figure(data=go.Violin(y=df[var], box_visible=True, meanline_visible=True, fillcolor='#BBDEFB', points='all'))
                fig_violin.update_layout(title=f'Distribution de {var}', yaxis_title=var, showlegend=False)
                st.plotly_chart(fig_violin, use_container_width=True)
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Distribution de {var} (Violon)</h4>
                    <ul>
                        <li>M√©diane {stats['50%']}, forte densit√© dans l'interquartile.</li>
                        <li>Valeur extr√™me √† {stats['max']} (Marsa Maroc).</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

            if show_quant_box:
                fig_box = go.Figure(data=go.Box(y=df[var], boxpoints='all', jitter=0.3, pointpos=-1.8, fillcolor='#BBDEFB'))
                fig_box.update_layout(title=f'Distribution de {var} (Boxplot)', yaxis_title=var, showlegend=False)
                fig_box.update_traces(marker=dict(color='#1E88E5'))
                st.plotly_chart(fig_box, use_container_width=True)
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Distribution de {var} (Boxplot)</h4>
                    <ul>
                        <li>M√©diane {stats['50%']}, interquartile [{stats['25%']}, {stats['75%']}].</li>
                        <li>Valeur extr√™me √† {stats['max']} (Marsa Maroc).</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

            Q1, Q3 = stats['25%'], stats['75%']
            IQR = Q3 - Q1
            outliers = df[(df[var] < Q1 - 1.5 * IQR) | (df[var] > Q3 + 1.5 * IQR)][var]
            st.markdown("**Valeurs Aberrantes**")
            st.write(f"Entreprises : {', '.join(outliers.index.tolist()) if not outliers.empty else 'Aucune'}")
            if not outliers.empty:
                st.write(f"Valeurs : {outliers.values.tolist()}")

    # 3. Analyse de Corr√©lation Bivari√©e
    st.markdown('<div class="subheader">Analyse de Corr√©lation Bivari√©e</div>', unsafe_allow_html=True)
    show_corr_scatter = st.checkbox("Nuage de Points", value=True, key='corr_scatter')
    show_corr_heatmap = st.checkbox("Matrice de Corr√©lation", value=True, key='corr_heatmap')

    # Analyse de corr√©lation
    st.markdown('<div class="subheader">Relation entre Toilettes et Fr√©quentation</div>', unsafe_allow_html=True)
    corr, p_value = pearsonr(df['NbToilettes'], df['NbPersonnesQuotidien'])
    st.markdown(f"""
    <div class="graph-comment">
        <h4>Synth√®se Statistique</h4>
        <ul>
            <li>Corr√©lation de Pearson : {round(corr, 3)}, liaison forte et positive.</li>
            <li>P-valeur : {round(p_value, 3)}, {'significative' if p_value < 0.05 else 'non significative'}.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    if show_corr_scatter:
        fig_scatter = px.scatter(df, x='NbToilettes', y='NbPersonnesQuotidien', text=df.index, title='Relation entre Toilettes et Fr√©quentation (Nuage)', color_discrete_sequence=['#1E88E5'])
        fig_scatter.update_traces(marker=dict(size=12))
        fig_scatter.update_layout(showlegend=False)
        st.plotly_chart(fig_scatter, use_container_width=True)
        st.markdown(f"""
        <div class="graph-comment">
            <h4>Nuage de Points</h4>
            <ul>
                <li>Forte liaison : plus de fr√©quentation, plus de toilettes.</li>
                <li>Valeur extr√™me : Marsa Maroc (90 toilettes, 1800 personnes).</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    if show_corr_heatmap:
        corr_matrix = df[variables_quantitatives].corr()
        fig_heatmap = ff.create_annotated_heatmap(z=corr_matrix.values, x=variables_quantitatives, y=variables_quantitatives, colorscale='Blues', annotation_text=corr_matrix.round(2).values)
        fig_heatmap.update_layout(title='Matrice de Corr√©lation', width=500, height=500)
        st.plotly_chart(fig_heatmap, use_container_width=True)
        st.markdown(f"""
        <div class="graph-comment">
            <h4>Matrice de Corr√©lation</h4>
            <ul>
                <li>Corr√©lation {round(corr, 2)} : forte liaison entre fr√©quentation et nombre de toilettes.</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        st.header("Principaux enseignements")
    st.write("""
    L‚Äôenqu√™te men√©e aupr√®s de huit op√©rateurs du port de Casablanca vise √† d√©crypter les usages domestiques de l‚Äôeau, 
    en examinant les √©quipements li√©s √† la consommation (sanitaires, restauration, arrosage, entretien) et la fr√©quentation 
    quotidienne.
    """)

    # Distribution des √âquipements
    st.write("""
    Concernant les variables cat√©goriques, l‚Äôanalyse des √©quipements r√©v√®le une adoption in√©gale des installations consommatrices d‚Äôeau :
    - **Douches** : Pr√©sentes chez 75% des op√©rateurs (6/8, dont ANP, Marsa Maroc, OCP), elles constituent l‚Äô√©quipement 
    sanitaire le plus courant, refl√©tant des besoins d‚Äôhygi√®ne pour le personnel portuaire.
    - **Jardin/Arrosage** : Uniquement chez ANP (12.5%, 1/8), cet usage est marginal, sugg√©rant une faible priorit√©.
    - **Restaurants, Lave-vaisselle, Lave-linge** : Absents chez tous les op√©rateurs (100%, 8/8).


    """)

    # Statistiques des Variables Num√©riques
    st.write("""
    Les variables quantitatives, nombre de toilettes (NbToilettes) et fr√©quentation quotidienne (NbPersonnesQuotidien), 
    pr√©sentent une forte variabilit√©, influenc√©e par la taille des op√©rateurs :

    **Nombre de Toilettes** :
    - Moyenne : 26,25 toilettes, m√©diane : 12,5, coefficient de variation (CV) : 125,8%.
    - √âtendue : 2 (petits op√©rateurs comme Mana Mesine) √† 90 (Marsa Maroc).
    - Distribution asym√©trique, avec une queue vers les grandes valeurs. Marsa Maroc (90 toilettes) est une valeur extr√™me, 
    refl√©tant son envergure.

    **Fr√©quentation Quotidienne** :
    - Moyenne : 437,5 personnes, m√©diane : 150, CV : 144,6%.
    - √âtendue : 10 (Mana Mesine, Glaci√®res du Port) √† 1800 (Marsa Maroc).
    - Distribution fortement asym√©trique, domin√©e par Marsa Maroc, qui concentre une fr√©quentation exceptionnelle.

    La forte dispersion (CV √©lev√©) et les valeurs extr√™mes soulignent l‚Äôh√©t√©rog√©n√©it√© des op√©rateurs portuaires, avec des 
    implications directes sur la consommation d‚Äôeau li√©e aux sanitaires.
    """)


    st.write("""
    L‚Äô√©tude de la relation entre le nombre de toilettes et la fr√©quentation quotidienne r√©v√®le une liaison significative :
    - **Corr√©lation de Pearson** : 0,944, indiquant une relation lin√©aire forte et positive.
    - **P-valeur** : 0,0002, confirmant la significativit√© statistique (p < 0,05).

    Cette corr√©lation sugg√®re que la fr√©quentation est un d√©terminant majeur de la demande en installations sanitaires, 
    et donc de la consommation domestique d‚Äôeau.
    """)
    # ‚úÖ Footer
    st.markdown("<br><br>", unsafe_allow_html=True)
    st.markdown(
    "<p style='text-align: center; color: gray; font-style: italic; font-size: 14px;'>¬© Mai 2025 | Dashboard d√©velopp√© par M. Bougantouche & M. Bouceta</p>", unsafe_allow_html=True)
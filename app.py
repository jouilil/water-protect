import pandas as pd
import plotly.express as px
import numpy as np
import streamlit as st
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from datetime import datetime

# ‚úÖ Configuration de la page Streamlit
st.set_page_config(layout="wide", page_title= "Global Water Consumption Dashboard")

# ‚úÖ Barre lat√©rale de navigation
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Choisir une interface :", ["Donn√©es officielles", "Enqu√™te Terrain"])

if page == "Donn√©es officielles":
    # üîΩ VOTRE CODE ACTUEL ICI üîΩ
    # load_data, forecast_sales, st.image, st.markdown, st.plotly_chart, etc.
    # ... (tout ce que vous avez d√©j√† fourni)

    # ‚úÖ Style personnalis√©
    st.markdown("""
        <style>
            body {
                background-color: white;
                color: black;
            }
            .stTitle, .stHeader, .stMarkdown h3, h3, h1 {
                color: black !important;
                font-weight: bold !important;
            }
            .block-container {
                background-color: white;
            }
            .stSelectbox, .stMultiSelect {
                background-color: #f0f0f0;
                color: black;
                border: 1px solid #ccc;
            }
            .stButton {
                background-color: #1976d2;
                color: white;
            }
            .stTextInput, .stTextArea {
                background-color: #f0f0f0;
                color: black;
                border: 1px solid #ccc;
            }
            .stSlider, .stRadio {
                background-color: #f0f0f0;
                color: black;
                border: 1px solid #ccc;
            }
            .css-1y5i3j3 {
                background-color: white;
            }
        </style>
    """, unsafe_allow_html=True)

    # ‚úÖ Charger les donn√©es
    @st.cache_data
    def load_data():
        df = pd.read_csv("data/cc1.csv")
        df['year'] = df['year'].astype(str).str.extract(r'(\d{4})')
        df = df.dropna(subset=['year'])
        df['year'] = df['year'].astype(int)
        df['Consumption'] = df['Consumption'].astype(str).str.replace(' ', '').astype(float)
        return df

    df = load_data()

    # ‚úÖ Fonction de pr√©vision
    @st.cache_data
    def forecast_sales(df, operator):
        operator_data = df[df['OPERATEUR'] == operator].copy()
        operator_data = operator_data.sort_values('year')

        X = operator_data[['year']]
        y = operator_data['Consumption']

        models = {
            "R√©gression Lin√©aire": LinearRegression(),
            "For√™t Al√©atoire": RandomForestRegressor(n_estimators=100, random_state=42),
            "Arbre de D√©cision": DecisionTreeRegressor(random_state=42),
            "R√©gression √† Vecteurs de Support": SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)
        }

        future_years = np.arange(2020, 2027)
        forecast_data = {}

        for model_name, model in models.items():
            model.fit(X, y)
            y_pred = model.predict(future_years.reshape(-1, 1))
            residuals = y - model.predict(X)
            std_dev = np.std(residuals)
            ci = 1.96 * std_dev

            forecast_data[model_name] = pd.DataFrame({
                "year": future_years,
                "prediction": y_pred,
                "lower": y_pred - ci,
                "upper": y_pred + ci
            })

        return operator_data, forecast_data

    # ‚úÖ En-t√™te
    col1, col2 = st.columns([1, 3])
    with col1:
        st.image("logo.JPG", width=130)
    with col2:
        st.markdown("<h1 style='color:blue; font-weight:bold;'>üíß Global Water Consumption Dashboard</h1>", unsafe_allow_html=True)

    # Date et heure actuelles en fran√ßais
    current_datetime = datetime.now().strftime("%d %B %Y %H:%M:%S")

    # Affichage dans Streamlit
    st.markdown(f"<p><strong>Derni√®re mise √† jour :</strong> {current_datetime}</p>", unsafe_allow_html=True)


    st.markdown("""

    <h2> <strong> 1. Introduction </strong></h2>

    <p> Ce Dashboard üíß interactif offre une vue analytique compl√®te de la consommation d‚Äôeau par op√©rateur au sein des ports marocains, couvrant la p√©riode allant de 2020 √† 2024 (janvier √† ao√ªt). D√©velopp√© pour faciliter la compr√©hension des dynamiques de consommation et appuyer la prise de d√©cision strat√©gique, il int√®gre plusieurs modules de visualisation et d‚Äôanalyse pr√©dictive.</p>

    <p>Ce Dashboard se structure en quatre volets principaux :</p>

    <ol>
    <li><strong>Analyse historique de la consommation par op√©rateur</strong> : un graphique lin√©aire interactif permet de visualiser l‚Äô√©volution annuelle des volumes d‚Äôeau vendus par chaque op√©rateur, mettant en √©vidence les tendances, pics et √©ventuelles ruptures.</li>
    <li><strong>R√©partition annuelle sous forme de graphique circulaire</strong> : cette visualisation met en relief la part relative de chaque ann√©e dans la consommation globale d‚Äôun op√©rateur donn√©, facilitant la comparaison entre exercices.</li>
    <li><strong>Comparaison inter-op√©rateurs par radar</strong> : une repr√©sentation radiale permet de comparer visuellement les volumes annuels de consommation entre op√©rateurs, avec la possibilit√© de s√©lectionner dynamiquement les ann√©es √† analyser.</li>
    <li><strong>Module de pr√©vision par Machine Learning</strong> : bas√© sur plusieurs algorithmes (r√©gression lin√©aire, for√™t al√©atoire, arbre de d√©cision et SVM), ce module propose des projections de la demande future, assorties d‚Äôintervalles de confiance pour mieux anticiper les √©volutions.</li>
    </ol>

    <p>Gr√¢ce √† une interface √©pur√©e, des filtres dynamiques et des repr√©sentations graphiques adapt√©es, ce tableau de bord constitue un outil d√©cisionnel robuste pour les gestionnaires, les analystes et les acteurs institutionnels impliqu√©s dans la gestion durable des ressources hydriques.</p>
    """, unsafe_allow_html=True)

    st.markdown("""
    <hr>
    <h3>‚öôÔ∏è <strong>Technologies et outils utilis√©s</strong></h3>

    <p>Le d√©veloppement de ce Dashboard interactif repose sur une combinaison d'outils et de technologies permettant de garantir √† la fois flexibilit√©, performance et interactivit√©.</p>

    <ul>
        <li><strong>Python</strong> : Le langage de programmation principal utilis√© pour la manipulation des donn√©es, le calcul des pr√©visions, et l'int√©gration des mod√®les de Machine Learning.</li>
        <li><strong>Streamlit</strong> : Un framework Python permettant de d√©velopper des applications web interactives. Il a √©t√© choisi pour sa simplicit√© d‚Äôutilisation et sa capacit√© √† g√©n√©rer rapidement des interfaces utilisateur performantes et esth√©tiques.</li>
        <li><strong>Pandas</strong> : Une biblioth√®que Python pour la gestion et la manipulation de donn√©es structur√©es. Elle est utilis√©e pour le pr√©traitement et l'agr√©gation des donn√©es historiques sur la consommation d‚Äôeau.</li>
        <li><strong>Plotly</strong> : Utilis√©e pour cr√©er des visualisations interactives. Plotly permet de g√©n√©rer des graphiques dynamiques et des cartes, adapt√©s aux besoins de visualisation des tendances de la consommation et des pr√©visions.</li>
        <li><strong>Scikit-learn</strong> : Biblioth√®que sp√©cialis√©e dans le Machine Learning, utilis√©e pour les mod√®les de r√©gression et de pr√©vision, notamment la r√©gression lin√©aire, l'arbre de d√©cision et la for√™t al√©atoire.</li>
        <li><strong>Visual Studio Code (VS Code)</strong> : L'environnement de d√©veloppement int√©gr√© (IDE) choisi pour la r√©daction du code, permettant une gestion claire du projet gr√¢ce √† ses fonctionnalit√©s de d√©bogage, de gestion de versions et d'int√©gration d'extensions Python.</li>
    </ul>

    <p>En combinant ces outils, le tableau de bord offre une solution robuste et √©volutive pour l'analyse de la consommation d'eau, capable de r√©pondre √† diff√©rents besoins d'analyse et de d√©cision, tout en restant facile √† utiliser pour les utilisateurs finaux.</p>
    """, unsafe_allow_html=True)

    # ‚úÖ Barre lat√©rale

    # ‚úÖ Titre section visualisation
    st.markdown("<h2>üìä 2. Description et Visualisations des Donn√©es</h2>", unsafe_allow_html=True)

    # ‚úÖ Ligne
    # ‚úÖ Graphique des ventes annuelles de tous les op√©rateurs
    st.markdown("<h3>üìà 2.1 Consommation d'Eau au fil du temps- Tous les Op√©rateurs</h3>", unsafe_allow_html=True)

    # Regrouper les donn√©es par op√©rateur et ann√©e
    grouped_all = df.groupby(['year', 'OPERATEUR'])['Consumption'].sum().reset_index()

    # Cr√©er la figure
    fig_all_operators = go.Figure()

    # Tracer une ligne par op√©rateur
    for operator in grouped_all['OPERATEUR'].unique():
        operator_data = grouped_all[grouped_all['OPERATEUR'] == operator]
        fig_all_operators.add_trace(go.Scatter(
            x=operator_data['year'],
            y=operator_data['Consumption'],
            mode='lines+markers',
            name=operator
        ))

    # Mise en forme
    fig_all_operators.update_layout(
        xaxis_title="Ann√©e",
        yaxis_title="Consommation ",
        title="",
        paper_bgcolor="white",
        plot_bgcolor="white",
        font_color="black",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.4,
            xanchor="center",
            x=0.5,
            font=dict(size=12)
        )
    )

    st.plotly_chart(fig_all_operators, use_container_width=True)
    # ‚úÖ Radar
    # ‚úÖ Radar avec les op√©rateurs comme angles et les ann√©es s√©lectionnables
    # ‚úÖ Radar avec couleurs diff√©rentes pour chaque ann√©e s√©lectionn√©e
    st.markdown("<h3>üîç 2.2 Comparaison Annuelle par Op√©rateur</h3>", unsafe_allow_html=True)

    # Liste des ann√©es disponibles
    available_years = sorted(df["year"].unique())

    # Checkboxes pour s√©lectionner les ann√©es √† comparer
    st.markdown("**S√©lectionnez les ann√©es √† comparer :**")
    selected_years = []
    cols = st.columns(len(available_years))
    for i, year in enumerate(available_years):
        if cols[i].checkbox(str(year), value=(year == max(available_years))):  # coche la plus r√©cente par d√©faut
            selected_years.append(year)

    # Si aucune ann√©e s√©lectionn√©e, afficher un avertissement
    if not selected_years:
        st.warning("Veuillez s√©lectionner au moins une ann√©e pour afficher le radar.")
    else:
        # Palette de couleurs pour distinguer les ann√©es
        color_palette = px.colors.qualitative.Set2 + px.colors.qualitative.Plotly

        # Cr√©er le radar chart
        fig_radar = go.Figure()

        for i, year in enumerate(selected_years):
            yearly_data = df[df["year"] == year]
            radar_summary = yearly_data.groupby("OPERATEUR")["Consumption"].sum().reset_index()

            fig_radar.add_trace(go.Scatterpolar(
                r=radar_summary["Consumption"],
                theta=radar_summary["OPERATEUR"],
                fill='toself',
                name=str(year),
                line=dict(color=color_palette[i % len(color_palette)])
            ))

        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(visible=True, range=[0, df[df['year'].isin(selected_years)]['Consumption'].max() * 1.1])
            ),
            showlegend=True,
            title=f"Radar de consommation par Op√©rateur ({', '.join(map(str, selected_years))})",
            paper_bgcolor="white",
            font_color="black",
            legend=dict(orientation="h", yanchor="bottom", y=-0.4, xanchor="center", x=0.5)
        )

        st.plotly_chart(fig_radar, use_container_width=True)



    # ‚úÖ Camembert

    # Contr√¥les de s√©lection dans la section 2.3
    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown("<h3>‚öôÔ∏è Analyse et Pr√©vision future </h3>", unsafe_allow_html=True)
    st.write("L‚Äôobjectif de cette section est de permettre √† l‚Äôutilisateur de s√©lectionner un op√©rateur afin d‚Äôacc√©der aux mod√®les de pr√©vision et aux statistiques annuelles, tout en organisant l‚Äôinterface de mani√®re claire et structur√©e gr√¢ce √† une disposition en colonnes. Merci de bien vouloir choisir un op√©rateur")
    st.write("Merci de s√©lectionner un op√©rateur")

    col1, col2 = st.columns([2, 3])
    with col1:
        selected_operator = st.selectbox("S√©lectionnez un op√©rateur :", sorted(df["OPERATEUR"].unique()), key="operator_select_2_3")
    with col2:
        selected_models = st.multiselect(
            "S√©lectionnez les mod√®les de pr√©vision :",
            ["R√©gression Lin√©aire", "For√™t Al√©atoire", "Arbre de D√©cision", "R√©gression √† Vecteurs de Support"],
            default=["R√©gression Lin√©aire", "For√™t Al√©atoire"],
            key="model_select_2_3"
        )

    st.markdown(f"<h3>‚≠ï 2.3  Part Annuelle de la Consommation - {selected_operator}</h3>", unsafe_allow_html=True)
    filtered_pie = df[df["OPERATEUR"] == selected_operator]
    pie_fig = px.pie(
        filtered_pie,
        names="year",
        values="Consumption",
        title=f"R√©partition Annuelle de la Consommation - {selected_operator}",
        hole=0.3,
        labels={"year": "Ann√©e", "Consumption": "Ventes (m¬≥)"}
    ).update_layout(
        paper_bgcolor="white",
        plot_bgcolor="white",
        font_color="black",
        legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5,
                    font=dict(size=12, color='black'),
                    bgcolor='rgba(0, 0, 0, 0.05)', borderwidth=0)
    )
    st.plotly_chart(pie_fig, use_container_width=True)

    # ‚úÖ Pr√©vision
    st.markdown(f"<h3>3. üîÆ Pr√©vision de la consommation d'Eau pour {selected_operator} (2020‚Äì2026)</h3>", unsafe_allow_html=True)
    st.markdown("""

        <p> Cette section  se concentre sur l'estimation de cla onsommation future d'eau √† travers diff√©rents mod√®les de Machine Learning. En exploitant des m√©thodes statistiques avanc√©es et des algorithmes d'apprentissage automatique, nous fournissons des pr√©visions bas√©es sur les donn√©es historiques des op√©rateurs.</p>

        <p>Les mod√®les de pr√©vision utilis√©s sont :</p>
        <ul>
            <li><strong>R√©gression Lin√©aire</strong> : Ce mod√®le simple mais puissant est utilis√© pour √©tablir une relation lin√©aire entre l'ann√©e et la consommation d'eau, permettant ainsi de pr√©voir les tendances futures.</li>
            <li><strong>For√™t Al√©atoire</strong> : Un mod√®le d'ensemble qui construit plusieurs arbres de d√©cision pour am√©liorer la pr√©cision des pr√©visions, tout en r√©duisant le risque de surajustement (overfitting).</li>
            <li><strong>Arbre de D√©cision</strong> : Un mod√®le non lin√©aire qui divise les donn√©es en sous-groupes homog√®nes, permettant de capturer des relations complexes dans les donn√©es de consommation.</li>
            <li><strong>R√©gression √† Vecteurs de Support (SVR)</strong> : Un mod√®le de r√©gression robuste qui transforme les donn√©es d'entr√©e dans un espace de plus grande dimension afin de trouver une meilleure approximation des donn√©es non lin√©aires.</li>
        </ul>

        <p>Les pr√©visions g√©n√©r√©es par ces mod√®les sont accompagn√©es d'intervalles de confiance √† 95 %, offrant ainsi une √©valuation de l'incertitude associ√©e √† chaque estimation. Ces informations sont cruciales pour une prise de d√©cision √©clair√©e, notamment en mati√®re de planification des ressources et de strat√©gie de gestion de l'eau.</p>

        <p>Gr√¢ce √† cette approche, les utilisateurs peuvent visualiser les tendances √† court et moyen terme de consommation d'eau pour chaque op√©rateur, facilitant ainsi la gestion et l'optimisation des ressources.</p>
    """, unsafe_allow_html=True)

    actual_data, forecast_data = forecast_sales(df, selected_operator)
    forecast_fig = go.Figure()

    forecast_fig.add_trace(go.Scatter(
        x=actual_data['year'],
        y=actual_data['Consumption'],
        mode='lines+markers',
        name='R√©el',
        line=dict(color='cyan')
    ))

    model_colors = {
        "R√©gression Lin√©aire": '#FFA500',
        "For√™t Al√©atoire": '#228B22',
        "Arbre de D√©cision": '#1E90FF',
        "R√©gression √† Vecteurs de Support": '#800080'
    }

    for model_name in selected_models:
        if model_name in forecast_data:
            forecast = forecast_data[model_name]
            color = model_colors[model_name]
            rgb = tuple(int(color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))

            forecast_fig.add_trace(go.Scatter(
                x=forecast['year'],
                y=forecast['prediction'],
                mode='lines+markers',
                name=f'Pr√©vision {model_name}',
                line=dict(color=color, dash='dash')
            ))
            forecast_fig.add_trace(go.Scatter(
                x=list(forecast['year']) + list(forecast['year'][::-1]),
                y=list(forecast['upper']) + list(forecast['lower'][::-1]),
                fill='toself',
                fillcolor=f'rgba{rgb + (0.2,)}',
                line=dict(color='rgba(255,255,255,0)'),
                hoverinfo="skip",
                name=f'{model_name} IC √† 95%'
            ))

    forecast_fig.update_layout(
        xaxis_title="Ann√©e",
        yaxis_title="Ventes",
        paper_bgcolor="white",
        plot_bgcolor="white",
        font_color="black",
        legend=dict(orientation="h", yanchor="bottom", y=-0.4, xanchor="center", x=0.5,
                    font=dict(size=12, color='black'),
                    bgcolor='rgba(0, 0, 0, 0.05)', borderwidth=0)
    )
    st.plotly_chart(forecast_fig, use_container_width=True)

    st.markdown("""
    <hr>
    <h3>üîö <strong>4. Conclusion</strong></h3>

    <p>Ce tableau de bord üíß constitue un outil strat√©gique essentiel pour le suivi, l‚Äôanalyse et l‚Äôanticipation de la consommation d‚Äôeau dans les ports marocains. En combinant des visualisations dynamiques avec des mod√®les de pr√©vision performants, il permet non seulement d‚Äôobserver les tendances pass√©es, mais aussi d‚Äôappuyer les d√©cisions futures en mati√®re de gestion des ressources hydriques.</p>

    <p>Sa structure modulaire, sa capacit√© √† comparer les op√©rateurs et √† int√©grer des sc√©narios prospectifs en font une solution compl√®te, √©volutive et adapt√©e aux besoins des gestionnaires publics, des op√©rateurs priv√©s et des institutions de r√©gulation. Il contribue ainsi √† renforcer la transparence, l'efficacit√© op√©rationnelle et la planification durable dans le secteur de l'eau portuaire.</p>
    """, unsafe_allow_html=True)

    # ‚úÖ Footer
    st.markdown("<br><br>", unsafe_allow_html=True)
    st.markdown(
        "<p style='text-align: center; color: gray; font-style: italic; font-size: 14px;'>¬© Mai 2025 | Tableau de bord d√©velopp√© par M. Bougantouche & M. Bouceta</p>",
        unsafe_allow_html=True
    )
elif page == "Enqu√™te Terrain":
    import streamlit as st
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    from io import StringIO
    from sklearn.preprocessing import StandardScaler
    from sklearn.cluster import KMeans
    from scipy.stats import pearsonr
    import plotly.figure_factory as ff

    # Configuration de la page pour un design am√©lior√©
        # Introduction
    st.markdown("""
    <div class="intro-box">
        <h4>Introduction</h4>
        <p>Cette interface pr√©sente une analyse approfondie des r√©sultats d'une enqu√™te men√©e aupr√®s des entreprises enqu√™t√©es, visant √† √©valuer leurs infrastructures et √©quipements. L'√©tude se concentre sur les installations sanitaires (<strong>toilettes</strong>, <strong>douches</strong>), les commodit√©s de restauration (<strong>restaurants</strong>), les am√©nagements ext√©rieurs (<strong>jardins</strong> ou <strong>syst√®mes d'arrosage</strong>), ainsi que les √©quipements d'entretien (<strong>lave-vaisselle</strong>, <strong>lave-linge</strong>). Elle examine √©galement la fr√©quentation quotidienne des locaux par le personnel et les visiteurs.</p>
        <p>L'objectif principal est de fournir une compr√©hension claire des tendances et des relations entre ces variables √† travers :</p>
        <ul>
            <li>Des <strong>statistiques descriptives</strong> d√©taill√©es pour chaque √©quipement et variable quantitative.</li>
            <li>Des <strong>visualisations interactives</strong>, incluant histogrammes, diagrammes en violon et nuages de points, pour une exploration visuelle des donn√©es.</li>
            <li>Des <strong>analyses univari√©es et bivari√©es</strong>, mettant en lumi√®re les distributions, les variabilit√©s et les corr√©lations potentielles.</li>
        </ul>
        <p>Les sections suivantes offrent une exploration structur√©e des donn√©es, avec des interpr√©tations rigoureuses pour soutenir la prise de d√©cision.</p>
    </div>
    """, unsafe_allow_html=True)
    # CSS personnalis√© pour am√©liorer le style des commentaires
    st.markdown("""
        <style>
        .main-title {
            font-size: 2.5em;
            color: #1E88E5;
            text-align: center;
            margin-bottom: 0.5em;
            font-weight: bold;
        }
        .section-header {
            font-size: 1.8em;
            color: #1565C0;
            border-bottom: 2px solid #BBDEFB;
            padding-bottom: 0.2em;
            margin-top: 1em;
        }
        .subheader {
            font-size: 1.4em;
            color: #1976D2;
            margin-top: 0.8em;
            font-weight: 600;
        }
        .info-box {
            background-color: #E3F2FD;
            padding: 1em;
            border-radius: 10px;
            margin-bottom: 1em;
            border: 1px solid #BBDEFB;
        }
        .stButton>button {
            background-color: #1E88E5;
            color: white;
            border-radius: 5px;
            padding: 0.5em 1em;
            font-weight: 500;
        }
        .stButton>button:hover {
            background-color: #1565C0;
            color: #E3F2FD;
        }
        .graph-comment, .table-comment {
            background-color: #F8FAFD;
            padding: 1.2em;
            margin: 0.8em 0;
            border-radius: 8px;
            border-left: 6px solid #1E88E5;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            font-size: 1.1em;
            line-height: 1.5;
            color: #333;
        }
        .graph-comment h4, .table-comment h4 {
            color: #1565C0;
            font-size: 1.3em;
            margin-bottom: 0.5em;
            display: flex;
            align-items: center;
        }
        .graph-comment h4::before, .table-comment h4::before {
            content: 'üìä ';
            margin-right: 0.3em;
        }
        .graph-comment ul, .table-comment ul {
            list-style-type: none;
            padding-left: 0;
        }
        .graph-comment li, .table-comment li {
            margin-bottom: 0.6em;
            position: relative;
            padding-left: 1.5em;
        }
        .graph-comment li::before, .table-comment li::before {
            content: '‚û§';
            color: #1E88E5;
            position: absolute;
            left: 0;
        }
        .graph-comment strong, .table-comment strong {
            color: #D81B60;
            font-weight: 600;
        }
        .expander-content {
            background-color: #FFFFFF;
            padding: 1em;
            border-radius: 5px;
            border: 1px solid #E0E0E0;
        }
        </style>
    """, unsafe_allow_html=True)

    # Titre principal
    st.markdown('<div class="main-title">üìä Analyse d\'Enqu√™te sur les √âquipements d\'Entreprise</div>', unsafe_allow_html=True)
    st.markdown("Une application interactive pour explorer les donn√©es d'enqu√™te, visualiser les tendances et effectuer des analyses statistiques avanc√©es.")

    # --- 1. Chargement et Pr√©traitement des Donn√©es ---
    @st.cache_data
    def load_and_preprocess_data():
        data = """Operateur,1. Votre entreprise dispose-t-elle de douches pour le personnel ?,2. Votre entreprise dispose-t-elle d‚Äôun restaurant pour le personnel?,3. Votre entreprise dispose-t-elle d‚Äôun jardin/syst√®me d‚Äôarrosage de plantes ?,4. Votre entreprise dispose-t-elle d‚Äôune ou plusieurs lave-vaisselle?,5. Votre entreprise dispose-t-elle d‚Äôun ou de plusieurs lave linge ?,6. De combien de toilettes disposez-vous dans votre b√¢timents ?,7. Combien de personnes fr√©quentent approximativement vos locaux quotidiennement (personnel et visiteurs √©ventuels) ?
    ANP,oui,non,oui,0,0,15,200
    GLACIERES DU PORT,oui,non,non,0,0,2,10
    Marsa Maroc,oui,non,non,0,0,90,1800
    OCP,oui,non,non,0,0,64,550
    ONP,non,non,non,0,0,10,100
    somaport,oui,non,non,0,0,25,800
    Mana mesine,oui,non,non,0,0,2,10
    SOGAP,oui,non,non,0,0,2,30
    """
        df = pd.read_csv(StringIO(data))
        noms_colonnes = {
            '1. Votre entreprise dispose-t-elle de douches pour le personnel ?': 'Douches',
            '2. Votre entreprise dispose-t-elle d‚Äôun restaurant pour le personnel?': 'Restaurant',
            '3. Votre entreprise dispose-t-elle d‚Äôun jardin/syst√®me d‚Äôarrosage de plantes ?': 'Jardin_Arrosage',
            '4. Votre entreprise dispose-t-elle d‚Äôune ou plusieurs lave-vaisselle?': 'LaveVaisselle',
            '5. Votre entreprise dispose-t-elle d‚Äôun ou de plusieurs lave linge ?': 'LaveLinge',
            '6. De combien de toilettes disposez-vous dans votre b√¢timents ?': 'NbToilettes',
            '7. Combien de personnes fr√©quentent approximativement vos locaux quotidiennement (personnel et visiteurs √©ventuels) ?': 'NbPersonnesQuotidien'
        }
        df.rename(columns=noms_colonnes, inplace=True)
        df.set_index('Operateur', inplace=True)

        # Pr√©traitement
        colonnes_oui_non = ['Douches', 'Restaurant', 'Jardin_Arrosage']
        for col in colonnes_oui_non:
            df[col] = df[col].str.strip().str.lower().map({'oui': 1, 'non': 0})
            if df[col].isna().any():
                df[col].fillna(0, inplace=True)

        df['LaveVaisselle'] = pd.to_numeric(df['LaveVaisselle'], errors='coerce').fillna(0).astype(int)
        df['LaveLinge'] = pd.to_numeric(df['LaveLinge'], errors='coerce').fillna(0).astype(int)
        return df

    # Charger les donn√©es
    df = load_and_preprocess_data()

    # --- 2. Aper√ßu des Donn√©es ---
    st.markdown('<div class="section-header">1. Aper√ßu des Donn√©es</div>', unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="subheader">Donn√©es Initiales (Avant Renommage)</div>', unsafe_allow_html=True)
        data_orig_str = """Operateur,1. Votre entreprise dispose-t-elle de douches pour le personnel ?,2. Votre entreprise dispose-t-elle d‚Äôun restaurant pour le personnel?,3. Votre entreprise dispose-t-elle d‚Äôun jardin/syst√®me d‚Äôarrosage de plantes ?,4. Votre entreprise dispose-t-elle d‚Äôune ou plusieurs lave-vaisselle?,5. Votre entreprise dispose-t-elle d‚Äôun ou de plusieurs lave linge ?,6. De combien de toilettes disposez-vous dans votre b√¢timents ?,7. Combien de personnes fr√©quentent approximativement vos locaux quotidiennement (personnel et visiteurs √©ventuels) ?
    ANP,oui,non,oui,0,0,15,200
    GLACIERES DU PORT,oui,non,non,0,0,2,10
    Marsa Maroc,oui,non,non,0,0,90,1800
    OCP,oui,non,non,0,0,64,550
    ONP,non,non,non,0,0,10,100
    somaport,oui,non,non,0,0,25,800
    Mana mesine,oui,non,non,0,0,2,10
    SOGAP,oui,non,non,0,0,2,30
    """
        df_orig_display = pd.read_csv(StringIO(data_orig_str))
        st.dataframe(df_orig_display, use_container_width=True)

        with st.expander("üîç Informations sur les Types de Donn√©es"):
            buffer = StringIO()
            df.info(buf=buffer)
            st.text(buffer.getvalue())

    # --- 3. Analyse Univari√©e ---
    st.markdown('<div class="section-header">2. Analyse Univari√©e</div>', unsafe_allow_html=True)

    # Variables cat√©goriques
    with st.container():
        st.markdown('<div class="subheader">Distribution des √âquipements (Variables Cat√©gorielles)</div>', unsafe_allow_html=True)
        variables_categorielles_encodees = ['Douches', 'Restaurant', 'Jardin_Arrosage', 'LaveVaisselle', 'LaveLinge']
        colonnes_a_exclure_plot = [col for col in variables_categorielles_encodees if df[col].nunique() == 1]

        # Analyse des variables constantes
        if colonnes_a_exclure_plot:
            st.markdown('<div class="subheader">Analyse des Variables Constantes</div>', unsafe_allow_html=True)
            for var in colonnes_a_exclure_plot:
                # Cr√©er un DataFrame pour le demi-donut
                value_counts_df = pd.DataFrame({'Valeur': [0], 'Nombre': [len(df)]})
                # Demi-donut chart
                fig_donut = go.Figure(data=[
                    go.Pie(
                        labels=['Non (0)'],
                        values=[len(df)],
                        hole=0.5,
                        pull=[0.1],
                        direction='clockwise',
                        rotation=90,
                        sort=False,
                        textinfo='percent+label',
                        textposition='inside',
                        marker=dict(colors=['#FF9999'])
                    )
                ])
                fig_donut.update_layout(
                    title=f'R√©partition de {var} (Demi-Donut)',
                    showlegend=True,
                    height=400,
                    annotations=[dict(text='100%', x=0.5, y=0.5, font_size=20, showarrow=False)]
                )
                st.plotly_chart(fig_donut, use_container_width=True)
                # Commentaire d√©taill√©
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Interpr√©tation de {var}</h4>
                    <ul>
                        <li><strong>Constante √† 0</strong>: Toutes les 8 entreprises ont une valeur de 0 pour {var}, indiquant une absence totale de {'lave-vaisselle' if var == 'LaveVaisselle' else 'lave-linge'} dans leurs locaux.</li>
                        <li><strong>Graphique</strong>: Le demi-donut montre que 100% des entreprises (8 sur 8) n'ont pas cet √©quipement, visualis√© par une seule section rouge.</li>
                        <li><strong>Contexte</strong>: Cette absence peut √™tre li√©e au type d'entreprises interrog√©es (ex. industrielles ou portuaires), o√π les √©quipements de lavage ne sont pas n√©cessaires ou sont externalis√©s.</li>
                        <li><strong>Implications</strong>:
                            <ul>
                                <li><strong>Infrastructure</strong>: Les entreprises privil√©gient d'autres √©quipements, comme les douches (75% de pr√©sence), probablement plus pertinentes pour le bien-√™tre du personnel.</li>
                                <li><strong>Co√ªt et pertinence</strong>: L'installation et l'entretien de {'lave-vaisselle' if var == 'LaveVaisselle' else 'lave-linge'} pourraient √™tre jug√©s non prioritaires ou trop co√ªteux.</li>
                                <li><strong>Homog√©n√©it√©</strong>: La constance de la valeur 0 sugg√®re un consensus parmi les entreprises, peut-√™tre d√ª √† des normes sectorielles ou √† des contraintes logistiques.</li>
                            </ul>
                        </li>
                        <li><strong>Comparaison</strong>:
                            <ul>
                                <li>Par rapport √† <code>Douches</code> (6 entreprises sur 8, 75%) ou <code>Jardin_Arrosage</code> (1 entreprise, 12.5%), {var} est compl√®tement absent, soulignant une diff√©rence marqu√©e dans les priorit√©s d'√©quipement.</li>
                                <li>Similaire √† <code>Restaurant</code> (0% de pr√©sence), mais contrairement √† <code>Restaurant</code>, {var} pourrait √™tre moins attendu dans un contexte industriel.</li>
                            </ul>
                        </li>
                        <li><strong>Conclusion</strong>: L'absence de {var} refl√®te probablement une inad√©quation avec les besoins op√©rationnels ou les budgets des entreprises interrog√©es, contrairement aux √©quipements sanitaires plus r√©pandus.</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

        # Variables non constantes
        st.markdown('<div class="subheader">Distribution des Variables Non Constantes</div>', unsafe_allow_html=True)
        # Comparaison des variables cat√©goriques
        st.markdown("**Comparaison des √âquipements**")
        cat_summary = pd.DataFrame({
            '√âquipement': variables_categorielles_encodees,
            'Pourcentage Oui (%)': [round(df[col].mean() * 100, 1) if col not in colonnes_a_exclure_plot else 0 for col in variables_categorielles_encodees],
            'Nombre Oui': [df[col].sum() if col not in colonnes_a_exclure_plot else 0 for col in variables_categorielles_encodees]
        })
        st.table(cat_summary)
        st.markdown(f"""
        <div class="table-comment">
            <h4>Interpr√©tation du Tableau</h4>
            <ul>
                <li><strong>Douches</strong>: {cat_summary[cat_summary['√âquipement'] == 'Douches']['Pourcentage Oui (%)'].iloc[0]}% des entreprises (6 sur 8) disposent de douches, ce qui en fait l'√©quipement le plus courant.</li>
                <li><strong>Restaurant</strong>: Aucun restaurant n'est pr√©sent (0%), indiquant une absence totale de cet √©quipement.</li>
                <li><strong>Jardin_Arrosage</strong>: Seulement {cat_summary[cat_summary['√âquipement'] == 'Jardin_Arrosage']['Pourcentage Oui (%)'].iloc[0]}% (1 entreprise, ANP) disposent d'un jardin ou syst√®me d'arrosage, ce qui est rare.</li>
                <li><strong>LaveVaisselle et LaveLinge</strong>: Aucun (0%), montrant une absence compl√®te de ces √©quipements.</li>
                <li><strong>Comparaison</strong>: Les douches sont nettement plus r√©pandues que les autres √©quipements, tandis que les restaurants et les syst√®mes de lavage sont inexistants, sugg√©rant des priorit√©s diff√©rentes dans les infrastructures des entreprises.</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        for var in [col for col in variables_categorielles_encodees if col not in colonnes_a_exclure_plot]:
            # Compute value counts and reset index
            value_counts_df = df[var].value_counts().reset_index()
            value_counts_df.columns = ['Valeur', 'Nombre']
            # Bar plot
            col1, col2 = st.columns(2)
            with col1:
                fig_bar = px.bar(value_counts_df, x='Valeur', y='Nombre',
                                labels={'Valeur': 'Valeur (0 = Non, 1 = Oui)', 'Nombre': 'Nombre'},
                                title=f'Distribution de {var} (Barres)',
                                color='Valeur', color_discrete_sequence=px.colors.qualitative.Pastel)
                fig_bar.update_layout(xaxis_title="Valeur (0 = Non, 1 = Oui)", yaxis_title="Nombre d'entreprises", showlegend=False)
                st.plotly_chart(fig_bar, use_container_width=True)
                # Commentaire pour le graphique en barres
                oui_count = value_counts_df[value_counts_df['Valeur'] == 1]['Nombre'].iloc[0] if 1 in value_counts_df['Valeur'].values else 0
                non_count = value_counts_df[value_counts_df['Valeur'] == 0]['Nombre'].iloc[0] if 0 in value_counts_df['Valeur'].values else 0
                oui_pct = round(oui_count / (oui_count + non_count) * 100, 1)
                non_pct = round(non_count / (oui_count + non_count) * 100, 1)
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Interpr√©tation du Graphique en Barres ({var})</h4>
                    <ul>
                        <li><strong>R√©partition</strong>: Le diagramme montre la r√©partition de l'√©quipement "{var}" parmi les 8 entreprises.</li>
                        <li><strong>Oui (1)</strong>: {oui_count} entreprises ({oui_pct}%) disposent de {var.lower()}.</li>
                        <li><strong>Non (0)</strong>: {non_count} entreprises ({non_pct}%) n'en disposent pas.</li>
                        <li><strong>Analyse</strong>: {'Les douches sont majoritaires, refl√©tant une priorit√© dans les infrastructures.' if var == 'Douches' else 'Les jardins sont tr√®s rares, ANP √©tant une exception.' if var == 'Jardin_Arrosage' else 'Aucun restaurant, ce qui est coh√©rent avec les infrastructures industrielles.'}</li>
                        <li><strong>Comparaison</strong>: Par rapport aux autres √©quipements, {var} est {'le plus courant' if var == 'Douches' else 'beaucoup moins r√©pandu' if var == 'Jardin_Arrosage' else 'totalement absent'}.</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

            # Pie chart
            with col2:
                fig_pie = px.pie(value_counts_df, values='Nombre', names='Valeur',
                                title=f'Distribution de {var} (Secteurs)',
                                color_discrete_sequence=px.colors.qualitative.Pastel)
                fig_pie.update_traces(textinfo='percent+label', textposition='inside')
                fig_pie.update_layout(showlegend=True)
                st.plotly_chart(fig_pie, use_container_width=True)
                # Commentaire pour le graphique en secteurs
                st.markdown(f"""
                <div class="graph-comment">
                    <h4>Interpr√©tation du Graphique en Secteurs ({var})</h4>
                    <ul>
                        <li><strong>Proportion</strong>: Ce diagramme illustre la proportion des entreprises avec ou sans {var.lower()}.</li>
                        <li><strong>Oui (1)</strong>: {oui_pct}% des entreprises, soit {oui_count} sur 8.</li>
                        <li><strong>Non (0)</strong>: {non_pct}% des entreprises, soit {non_count} sur 8.</li>
                        <li><strong>Analyse</strong>: La visualisation met en √©vidence {'une forte adoption des douches' if var == 'Douches' else 'la raret√© des jardins' if var == 'Jardin_Arrosage' else 'l\'absence totale de restaurants'}.</li>
                        <li><strong>Comparaison</strong>: Par rapport √† {'Douches (75% Oui)' if var != 'Douches' else 'Jardin_Arrosage (12.5% Oui)'}, {var} montre {'une adoption bien moindre' if var != 'Douches' else 'la plus forte adoption'}.</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

    # Variables quantitatives
    with st.container():
        st.markdown('<div class="subheader">Distribution des Variables Quantitatives</div>', unsafe_allow_html=True)
        variables_quantitatives = ['NbToilettes', 'NbPersonnesQuotidien']

        # Comparaison des variables quantitatives
        st.markdown("**Comparaison des Statistiques Descriptives**")
        stats_summary = pd.DataFrame({
            'Statistique': ['Moyenne', '√âcart-type', 'M√©diane', 'Minimum', 'Maximum', 'Coefficient de variation (%)'],
            'NbToilettes': [
                round(df['NbToilettes'].mean(), 2),
                round(df['NbToilettes'].std(), 2),
                round(df['NbToilettes'].median(), 2),
                int(df['NbToilettes'].min()),
                int(df['NbToilettes'].max()),
                round(df['NbToilettes'].std() / df['NbToilettes'].mean() * 100, 1)
            ],
            'NbPersonnesQuotidien': [
                round(df['NbPersonnesQuotidien'].mean(), 2),
                round(df['NbPersonnesQuotidien'].std(), 2),
                round(df['NbPersonnesQuotidien'].median(), 2),
                int(df['NbPersonnesQuotidien'].min()),
                int(df['NbPersonnesQuotidien'].max()),
                round(df['NbPersonnesQuotidien'].std() / df['NbPersonnesQuotidien'].mean() * 100, 1)
            ]
        })
        st.table(stats_summary)
        st.markdown(f"""
        <div class="table-comment">
            <h4>Interpr√©tation du Tableau</h4>
            <ul>
                <li><strong>NbToilettes</strong>:
                    <ul>
                        <li><strong>Moyenne</strong>: 26.25 toilettes, mais m√©diane √† 12.5, indiquant une distribution fortement asym√©trique √† droite.</li>
                        <li><strong>√âcart-type</strong>: 33.03, CV : 125.8% ‚Üí Tr√®s forte variabilit√©, due √† des valeurs extr√™mes comme Marsa Maroc (90 toilettes).</li>
                        <li><strong>√âtendue</strong>: 2 √† 90 toilettes, montrant une grande disparit√© entre petites et grandes entreprises.</li>
                    </ul>
                </li>
                <li><strong>NbPersonnesQuotidien</strong>:
                    <ul>
                        <li><strong>Moyenne</strong>: 437.5 personnes, m√©diane : 150 ‚Üí Asym√©trie encore plus prononc√©e.</li>
                        <li><strong>√âcart-type</strong>: 632.73, CV : 144.6% ‚Üí Variabilit√© plus √©lev√©e que pour NbToilettes, avec Marsa Maroc (1800 personnes) comme valeur extr√™me.</li>
                        <li><strong>√âtendue</strong>: 10 √† 1800 personnes, refl√©tant des diff√©rences importantes dans la taille des entreprises.</li>
                    </ul>
                </li>
                <li><strong>Comparaison</strong>:
                    <ul>
                        <li>NbPersonnesQuotidien montre une variabilit√© relative plus √©lev√©e (CV 144.6% vs 125.8%), due √† une plus grande amplitude (1790 vs 88).</li>
                        <li>Les deux variables sont asym√©triques √† droite, mais NbPersonnesQuotidien a une queue plus longue (max 1800 vs 90).</li>
                        <li>Les entreprises comme Marsa Maroc dominent les deux variables, sugg√©rant une corr√©lation potentielle.</li>
                    </ul>
                </li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        for var in variables_quantitatives:
            with st.expander(f"üìà Analyse de {var}", expanded=True):
                # Statistiques descriptives
                stats = df[var].describe()
                cv = df[var].std() / df[var].mean() * 100
                stats_df = pd.DataFrame({
                    'Statistique': ['Nombre', 'Moyenne', '√âcart-type', 'M√©diane', 'Minimum', 'Q1 (25%)', 'Q3 (75%)', 'Maximum', 'Coefficient de variation'],
                    'Valeur': [
                        int(stats['count']),
                        round(stats['mean'], 2),
                        round(stats['std'], 2),
                        round(stats['50%'], 2),
                        int(stats['min']),
                        round(stats['25%'], 2),
                        round(stats['75%'], 2),
                        int(stats['max']),
                        f"{round(cv, 2)}%"
                    ]
                })
                st.markdown("**Statistiques Descriptives**")
                st.table(stats_df)
                # Commentaire pour le tableau
                st.markdown(f"""
                <div class="table-comment">
                    <h4>Interpr√©tation du Tableau ({var})</h4>
                    <ul>
                        <li><strong>Moyenne vs M√©diane</strong>: La moyenne ({round(stats['mean'], 2)}) est {'bien sup√©rieure' if stats['mean'] > stats['50%'] * 1.5 else 'sup√©rieure'} √† la m√©diane ({round(stats['50%'], 2)}), indiquant une distribution asym√©trique √† droite.</li>
                        <li><strong>Dispersion</strong>: L'√©cart-type ({round(stats['std'], 2)}) et le CV ({round(cv, 2)}%) montrent une {'forte' if cv > 50 else 'mod√©r√©e' if cv > 20 else 'faible'} variabilit√©.</li>
                        <li><strong>√âtendue</strong>: De {int(stats['min'])} √† {int(stats['max'])}, soit une diff√©rence de {int(stats['max'] - stats['min'])} {'toilettes' if var == 'NbToilettes' else 'personnes'}.</li>
                        <li><strong>Quartiles</strong>: 50% des entreprises ont entre {round(stats['25%'], 2)} et {round(stats['75%'], 2)} {'toilettes' if var == 'NbToilettes' else 'personnes'}, montrant {'une concentration autour de petites valeurs' if stats['25%'] < stats['mean'] else 'une r√©partition plus √©quilibr√©e'}.</li>
                        <li><strong>Comparaison</strong>: Par rapport √† {'NbPersonnesQuotidien' if var == 'NbToilettes' else 'NbToilettes'}, {var} a {'une variabilit√© moindre' if var == 'NbToilettes' else 'une variabilit√© plus √©lev√©e'} (CV {round(cv, 2)}% vs {round(df['NbPersonnesQuotidien'].std() / df['NbPersonnesQuotidien'].mean() * 100, 2) if var == 'NbToilettes' else round(df['NbToilettes'].std() / df['NbToilettes'].mean() * 100, 2)}%).</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

                # Visualisations
                col1, col2 = st.columns(2)
                with col1:
                    fig_hist = px.histogram(df, x=var, nbins=10, title=f'Distribution de {var}',
                                            color_discrete_sequence=['#1E88E5'])
                    fig_hist.update_layout(xaxis_title=var, yaxis_title='Fr√©quence', showlegend=False)
                    st.plotly_chart(fig_hist, use_container_width=True)
                    # Commentaire pour l'histogramme
                    max_freq = df[var].value_counts(bins=10).max()
                    st.markdown(f"""
                    <div class="graph-comment">
                        <h4>Interpr√©tation de l'Histogramme ({var})</h4>
                        <ul>
                            <li><strong>R√©partition</strong>: Cet histogramme montre la r√©partition de "{var}" parmi les 8 entreprises.</li>
                            <li><strong>Concentration</strong>: La majorit√© des entreprises ont des valeurs autour de {round(stats['50%'], 2)} {'toilettes' if var == 'NbToilettes' else 'personnes'}, avec une fr√©quence maximale de {max_freq} entreprises par intervalle.</li>
                            <li><strong>Asym√©trie</strong>: La distribution est {'fortement' if stats['mean'] > stats['50%'] * 1.5 else ''} √† droite, avec une queue vers {int(stats['max'])} (ex. Marsa Maroc : {90 if var == 'NbToilettes' else 1800}).</li>
                            <li><strong>Variabilit√©</strong>: La large √©tendue ({int(stats['max'] - stats['min'])}) refl√®te {'une forte h√©t√©rog√©n√©it√©' if cv > 50 else 'une h√©t√©rog√©n√©it√© mod√©r√©e'}.</li>
                            <li><strong>Comparaison</strong>: Par rapport √† {'NbPersonnesQuotidien' if var == 'NbToilettes' else 'NbToilettes'}, {var} montre {'une queue moins longue' if var == 'NbToilettes' else 'une queue plus longue'} (max {int(stats['max'])} vs {1800 if var == 'NbToilettes' else 90}).</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)

                with col2:
                    fig_violin = go.Figure(data=go.Violin(y=df[var], box_visible=True, line_color='#1565C0',
                                                        meanline_visible=True, fillcolor='#BBDEFB', opacity=0.6,
                                                        points='all', pointpos=0, jitter=0.05))
                    fig_violin.update_layout(title=f'Diagramme en Violon de {var}', yaxis_title=var, showlegend=False)
                    st.plotly_chart(fig_violin, use_container_width=True)
                    # Commentaire pour le violon
                    st.markdown(f"""
                    <div class="graph-comment">
                        <h4>Interpr√©tation du Diagramme en Violon ({var})</h4>
                        <ul>
                            <li><strong>Densit√©</strong>: Ce diagramme montre la densit√© et la r√©partition de "{var}".</li>
                            <li><strong>Concentration</strong>: La largeur maximale autour de {round(stats['50%'], 2)} indique une forte concentration des entreprises √† ce niveau.</li>
                            <li><strong>M√©diane et Quartiles</strong>: La m√©diane ({round(stats['50%'], 2)}) et l'intervalle interquartile ({round(stats['25%'], 2)} √† {round(stats['75%'], 2)}) montrent que 50% des entreprises ont des valeurs dans cet intervalle.</li>
                            <li><strong>Valeurs extr√™mes</strong>: Les points √† {int(stats['max'])} (ex. Marsa Maroc) indiquent des entreprises hors norme.</li>
                            <li><strong>Comparaison</strong>: Par rapport √† {'NbPersonnesQuotidien' if var == 'NbToilettes' else 'NbToilettes'}, {var} a {'une distribution moins √©tir√©e' if var == 'NbToilettes' else 'une distribution plus √©tir√©e'} (√©tendue {int(stats['max'] - stats['min'])} vs {1790 if var == 'NbToilettes' else 88}).</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)

                # D√©tection des valeurs aberrantes
                Q1, Q3 = stats['25%'], stats['75%']
                IQR = Q3 - Q1
                lower_bound, upper_bound = Q1 - 1.5 * IQR, Q3 + 1.5 * IQR
                outliers = df[(df[var] < lower_bound) | (df[var] > upper_bound)][var]
                if not outliers.empty:
                    st.markdown("**Valeurs Aberrantes**")
                    st.write(f"Entreprises avec valeurs aberrantes pour {var} : {', '.join(outliers.index.tolist())}")
                    st.write(f"Valeurs : {outliers.values.tolist()}")
                else:
                    st.markdown("**Valeurs Aberrantes** : Aucune d√©tect√©e.")

    # --- 4. Analyse de Corr√©lation ---
    st.markdown('<div class="section-header">3. Analyse de Corr√©lation</div>', unsafe_allow_html=True)

    with st.container():
        if len(variables_quantitatives) > 1:
            st.markdown('<div class="subheader">Corr√©lation entre NbToilettes et NbPersonnesQuotidien</div>', unsafe_allow_html=True)
            corr, p_value = pearsonr(df['NbToilettes'], df['NbPersonnesQuotidien'])
            st.markdown(f"""
            <div class="table-comment">
                <h4>R√©sultats de la Corr√©lation</h4>
                <ul>
                    <li><strong>Coefficient de Pearson</strong>: {round(corr, 3)}</li>
                    <li><strong>P-valeur</strong>: {round(p_value, 3)}</li>
                    <li><strong>Interpr√©tation</strong>: {'Corr√©lation significative' if p_value < 0.05 else 'Corr√©lation non significative'} (p {'< 0.05' if p_value < 0.05 else '‚â• 0.05'}).</li>
                    <li><strong>Force</strong>: {'Forte' if abs(corr) > 0.7 else 'Mod√©r√©e' if abs(corr) > 0.3 else 'Faible'} ({'positive' if corr > 0 else 'n√©gative'}).</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

            # Nuage de points
            fig_scatter = px.scatter(df, x='NbToilettes', y='NbPersonnesQuotidien', text=df.index,
                                    title='NbToilettes vs NbPersonnesQuotidien',
                                    color_discrete_sequence=['#1E88E5'])
            fig_scatter.update_traces(textposition='top center', marker=dict(size=12))
            fig_scatter.update_layout(showlegend=False)
            st.plotly_chart(fig_scatter, use_container_width=True)
            # Commentaire pour le nuage de points
            st.markdown(f"""
            <div class="graph-comment">
                <h4>Interpr√©tation du Nuage de Points</h4>
                <ul>
                    <li><strong>Tendance</strong>: Ce nuage de points illustre la relation entre le nombre de toilettes et le nombre de personnes fr√©quentant les locaux.</li>
                    <li><strong>Corr√©lation</strong>: Une corr√©lation {'forte' if abs(corr) > 0.7 else 'mod√©r√©e' if abs(corr) > 0.3 else 'faible'} et {'positive' if corr > 0 else 'n√©gative'} est observ√©e (coefficient = {round(corr, 3)}).</li>
                    <li><strong>Valeurs cl√©s</strong>: Marsa Maroc (90 toilettes, 1800 personnes) est un point extr√™me, tandis que GLACIERES DU PORT et Mana mesine (2 toilettes, 10 personnes) sont au bas de l'√©chelle.</li>
                    <li><strong>Comparaison</strong>: Les entreprises avec plus de personnes (ex. Marsa Maroc, somaport) ont syst√©matiquement plus de toilettes, confirmant la corr√©lation.</li>
                    <li><strong>Insight</strong>: {'La forte corr√©lation sugg√®re que le nombre de toilettes est directement li√© √† la fr√©quentation.' if abs(corr) > 0.7 else 'La corr√©lation mod√©r√©e indique une relation, mais d\'autres facteurs peuvent influencer.'}</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

            # Matrice de corr√©lation
            st.markdown('<div class="subheader">Matrice de Corr√©lation</div>', unsafe_allow_html=True)
            corr_matrix = df[variables_quantitatives].corr()
            fig_heatmap = ff.create_annotated_heatmap(
                z=corr_matrix.values, x=variables_quantitatives, y=variables_quantitatives,
                colorscale='Blues', annotation_text=corr_matrix.round(2).values
            )
            fig_heatmap.update_layout(title='Matrice de Corr√©lation', width=500, height=500)
            st.plotly_chart(fig_heatmap, use_container_width=True)
            # Commentaire pour la matrice de corr√©lation
            st.markdown(f"""
            <div class="graph-comment">
                <h4>Interpr√©tation de la Matrice de Corr√©lation</h4>
                <ul>
                    <li><strong>Relation</strong>: Cette matrice montre la relation entre NbToilettes et NbPersonnesQuotidien.</li>
                    <li><strong>Valeur cl√©</strong>: La corr√©lation de {round(corr, 2)} indique une {'forte' if abs(corr) > 0.7 else 'mod√©r√©e' if abs(corr) > 0.3 else 'faible'} relation {'positive' if corr > 0 else 'n√©gative'}.</li>
                    <li><strong>Diagonale</strong>: Les valeurs de 1 repr√©sentent la corr√©lation parfaite d'une variable avec elle-m√™me.</li>
                    <li><strong>Comparaison</strong>: La forte corr√©lation (proche de 1) confirme que les entreprises avec plus de personnes ont tendance √† avoir plus de toilettes, comme observ√© dans le nuage de points.</li>
                    <li><strong>Insight</strong>: Cette relation sugg√®re que la taille de l'entreprise (en termes de fr√©quentation) influence directement les infrastructures sanitaires.</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown('<div class="info-box">‚ÑπÔ∏è Pas assez de variables quantitatives pour une analyse de corr√©lation.</div>', unsafe_allow_html=True)

    # --- 5. T√©l√©chargement des R√©sultats ---
    st.markdown('<div class="section-header">4. T√©l√©chargement des R√©sultats</div>', unsafe_allow_html=True)
    csv = df.to_csv()
    st.download_button(
        label="üì• T√©l√©charger les donn√©es transform√©es (CSV)",
        data=csv,
        file_name="donnees_enquete_transformees.csv",
        mime="text/csv"
    )